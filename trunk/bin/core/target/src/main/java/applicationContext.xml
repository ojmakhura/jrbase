<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- Generated by: applicationContext.xml.vsl in andromda-spring-cartridge. -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd">

    <!-- ========================= GENERAL DEFINITIONS ========================= -->

    <!-- Message source for this context, loaded from localized "messages_xx" files -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename"><value>messages</value></property>
    </bean>

    <!-- applicationContext merge-point -->
    <bean id="hibernateMappingLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <!-- applicationContext hibernateMappingLocations merge-point -->
                <value>classpath:com/systemsjr/jrbase/individual/Individual.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/user/User.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/user/UserLocation.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/organisation/Organisation.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/organisation/OrganisationType.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/location/LocationType.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/location/Location.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/counter/Counter.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/role/Role.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/clearancelevel/ClearanceLevel.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/loginsession/LoginSession.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/workbench/program/Program.hbm.xml</value>
                <value>classpath:com/systemsjr/jrbase/workbench/menu/Menu.hbm.xml</value>
            </list>
         </property>
    </bean>

    <bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.default_batch_fetch_size">16</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
                <prop key="hibernate.cache.query_cache_factory">org.hibernate.cache.StandardQueryCacheFactory</prop>
                <!-- add specific (non-supported in the Spring cartridge) hibernate properties here -->
            </props>
        </property>
    </bean>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mappingLocations" ref="hibernateMappingLocations"/>
        <property name="hibernateProperties" ref="hibernateProperties"/>
        <!-- applicationContext sessionFactory merge-point -->
    </bean>

    <!-- The Hibernate interceptor -->
    <bean id="hibernateInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- applicationContext hibernateInterceptor merge-point -->
    </bean>

    <bean id="com.systemsjr.jrbase.individual.IndividualDaoImpl" class="com.systemsjr.jrbase.individual.IndividualDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getLocationDao" bean="locationDao"/>
        <lookup-method name="getUserDao" bean="userDao"/>
        <!-- Individual entity property merge-point -->
    </bean>

    <!-- Individual Entity Proxy with inner Individual Entity implementation -->
    <bean id="individualDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.individual.IndividualDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.individual.IndividualDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.user.UserDaoImpl" class="com.systemsjr.jrbase.user.UserDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getIndividualDao" bean="individualDao"/>
        <lookup-method name="getUserLocationDao" bean="userLocationDao"/>
        <lookup-method name="getRoleDao" bean="roleDao"/>
        <lookup-method name="getLoginSessionDao" bean="loginSessionDao"/>
        <lookup-method name="getMenuDao" bean="menuDao"/>
        <lookup-method name="getProgramDao" bean="programDao"/>
        <!-- User entity property merge-point -->
    </bean>

    <!-- User Entity Proxy with inner User Entity implementation -->
    <bean id="userDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.user.UserDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.user.UserDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.user.UserLocationDaoImpl" class="com.systemsjr.jrbase.user.UserLocationDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getUserDao" bean="userDao"/>
        <lookup-method name="getLocationDao" bean="locationDao"/>
        <!-- UserLocation entity property merge-point -->
    </bean>

    <!-- UserLocation Entity Proxy with inner UserLocation Entity implementation -->
    <bean id="userLocationDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.user.UserLocationDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.user.UserLocationDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.organisation.OrganisationDaoImpl" class="com.systemsjr.jrbase.organisation.OrganisationDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getOrganisationTypeDao" bean="organisationTypeDao"/>
        <!-- Organisation entity property merge-point -->
    </bean>

    <!-- Organisation Entity Proxy with inner Organisation Entity implementation -->
    <bean id="organisationDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.organisation.OrganisationDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.organisation.OrganisationDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.organisation.OrganisationTypeDaoImpl" class="com.systemsjr.jrbase.organisation.OrganisationTypeDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getOrganisationDao" bean="organisationDao"/>
        <!-- OrganisationType entity property merge-point -->
    </bean>

    <!-- OrganisationType Entity Proxy with inner OrganisationType Entity implementation -->
    <bean id="organisationTypeDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.organisation.OrganisationTypeDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.organisation.OrganisationTypeDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.location.LocationTypeDaoImpl" class="com.systemsjr.jrbase.location.LocationTypeDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- LocationType entity property merge-point -->
    </bean>

    <!-- LocationType Entity Proxy with inner LocationType Entity implementation -->
    <bean id="locationTypeDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.location.LocationTypeDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.location.LocationTypeDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.location.LocationDaoImpl" class="com.systemsjr.jrbase.location.LocationDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getLocationTypeDao" bean="locationTypeDao"/>
        <lookup-method name="getLoginSessionDao" bean="loginSessionDao"/>
        <!-- Location entity property merge-point -->
    </bean>

    <!-- Location Entity Proxy with inner Location Entity implementation -->
    <bean id="locationDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.location.LocationDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.location.LocationDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.counter.CounterDaoImpl" class="com.systemsjr.jrbase.counter.CounterDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <!-- Counter entity property merge-point -->
    </bean>

    <!-- Counter Entity Proxy with inner Counter Entity implementation -->
    <bean id="counterDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.counter.CounterDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.counter.CounterDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.role.RoleDaoImpl" class="com.systemsjr.jrbase.role.RoleDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getClearanceLevelDao" bean="clearanceLevelDao"/>
        <lookup-method name="getUserDao" bean="userDao"/>
        <lookup-method name="getMenuDao" bean="menuDao"/>
        <lookup-method name="getProgramDao" bean="programDao"/>
        <!-- Role entity property merge-point -->
    </bean>

    <!-- Role Entity Proxy with inner Role Entity implementation -->
    <bean id="roleDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.role.RoleDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.role.RoleDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.clearancelevel.ClearanceLevelDaoImpl" class="com.systemsjr.jrbase.clearancelevel.ClearanceLevelDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getUpperDao" bean="clearanceLevelDao"/>
        <lookup-method name="getClearanceLevelDao" bean="clearanceLevelDao"/>
        <lookup-method name="getUserDao" bean="userDao"/>
        <lookup-method name="getRoleDao" bean="roleDao"/>
        <!-- ClearanceLevel entity property merge-point -->
    </bean>

    <!-- ClearanceLevel Entity Proxy with inner ClearanceLevel Entity implementation -->
    <bean id="clearanceLevelDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.clearancelevel.ClearanceLevelDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.clearancelevel.ClearanceLevelDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.loginsession.LoginSessionDaoImpl" class="com.systemsjr.jrbase.loginsession.LoginSessionDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getUserDao" bean="userDao"/>
        <lookup-method name="getLocationDao" bean="locationDao"/>
        <!-- LoginSession entity property merge-point -->
    </bean>

    <!-- LoginSession Entity Proxy with inner LoginSession Entity implementation -->
    <bean id="loginSessionDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.loginsession.LoginSessionDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.loginsession.LoginSessionDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.workbench.program.ProgramDaoImpl" class="com.systemsjr.jrbase.workbench.program.ProgramDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getMenuDao" bean="menuDao"/>
        <lookup-method name="getUserDao" bean="userDao"/>
        <lookup-method name="getRoleDao" bean="roleDao"/>
        <!-- Program entity property merge-point -->
    </bean>

    <!-- Program Entity Proxy with inner Program Entity implementation -->
    <bean id="programDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.workbench.program.ProgramDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.workbench.program.ProgramDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.workbench.menu.MenuDaoImpl" class="com.systemsjr.jrbase.workbench.menu.MenuDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <lookup-method name="getProgramDao" bean="programDao"/>
        <lookup-method name="getUserDao" bean="userDao"/>
        <lookup-method name="getRoleDao" bean="roleDao"/>
        <!-- Menu entity property merge-point -->
    </bean>

    <!-- Menu Entity Proxy with inner Menu Entity implementation -->
    <bean id="menuDao" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.workbench.menu.MenuDaoImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.workbench.menu.MenuDao"/>
        <property name="interceptorNames">
            <list>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <!-- ========================= Start of SERVICE DEFINITIONS ========================= -->

    <!-- Service Transactional Interceptor -->
    <bean id="serviceTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributeSource">
            <value>
                com.systemsjr.jrbase.individual.service.IndividualService.saveIndividual=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.individual.service.IndividualService.getAllIndividuals=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.individual.service.IndividualService.removeIndividual=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.user.service.UserService.saveUser=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.user.service.UserService.removeUser=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.user.service.UserService.getAllUsers=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.user.service.UserService.getUsersByStatus=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.user.service.UserService.getUserDetails=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.user.service.UserService.getUserLocations=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.user.service.UserService.getUserCurrentLocation=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.organisation.service.OrganisationService.getOrganisationBranches=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.organisation.service.OrganisationService.saveOrganisation=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.organisation.service.OrganisationService.saveOrganisationType=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.organisation.service.OrganisationService.getAllOrganisations=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.organisation.service.OrganisationService.getAllOrganisationTypes=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.organisation.service.OrganisationService.removeOrganisation=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.organisation.service.OrganisationService.removeOrganisationType=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.getAllAreasByType=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.getAreasInArea=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.removeArea=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.saveArea=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.removeAreaType=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.saveAreaType=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.getAllAreaTypes=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.getAreasByStatus=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.location.service.LocationService.getAreaTypesByStatus=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.counter.service.CounterService.createCounter=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.counter.service.CounterService.getCount=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.counter.service.CounterService.removeCounter=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.role.service.RoleService.saveRole=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.role.service.RoleService.getAllRoles=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.role.service.RoleService.getRolesByClearance=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.role.service.RoleService.getRoleClearanceLevels=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.role.service.RoleService.removeRole=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.clearancelevel.service.ClearanceLevelService.getAllClearanceLevels=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.loginsession.service.LoginSessionService.saveLoginSession=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.loginsession.service.LoginSessionService.getAllLoginSessions=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.loginsession.service.LoginSessionService.verifyLoginDetails=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.program.service.ProgramService.getAllPrograms=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.program.service.ProgramService.saveProgram=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.program.service.ProgramService.removeProgram=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.menu.service.MenuService.getAllMenus=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.menu.service.MenuService.getMenuBycode=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.menu.service.MenuService.getMenuByName=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.menu.service.MenuService.saveMenu=PROPAGATION_REQUIRED
                com.systemsjr.jrbase.workbench.menu.service.MenuService.removeMenu=PROPAGATION_REQUIRED
            </value>
        </property>
    <!-- applicationContext serviceTransactionInterceptor merge-point -->
    </bean>

    <bean id="com.systemsjr.jrbase.individual.service.IndividualServiceImpl" class="com.systemsjr.jrbase.individual.service.IndividualServiceImpl" >
        <property name="individualDao" ref="individualDao"/>
        <property name="locationDao" ref="locationDao"/>
        <property name="locationTypeDao" ref="locationTypeDao"/>
        <property name="userDao" ref="userDao"/>
        <!-- IndividualService service property merge-point -->
    </bean>

    <!-- IndividualService Service Proxy with inner IndividualService Service Implementation -->
    <bean id="individualService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.individual.service.IndividualServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.individual.service.IndividualService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.user.service.UserServiceImpl" class="com.systemsjr.jrbase.user.service.UserServiceImpl" >
        <property name="userDao" ref="userDao"/>
        <property name="userLocationDao" ref="userLocationDao"/>
        <property name="locationDao" ref="locationDao"/>
        <!-- UserService service property merge-point -->
    </bean>

    <!-- UserService Service Proxy with inner UserService Service Implementation -->
    <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.user.service.UserServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.user.service.UserService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.organisation.service.OrganisationServiceImpl" class="com.systemsjr.jrbase.organisation.service.OrganisationServiceImpl" >
        <property name="organisationDao" ref="organisationDao"/>
        <property name="locationDao" ref="locationDao"/>
        <property name="organisationTypeDao" ref="organisationTypeDao"/>
        <!-- OrganisationService service property merge-point -->
    </bean>

    <!-- OrganisationService Service Proxy with inner OrganisationService Service Implementation -->
    <bean id="organisationService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.organisation.service.OrganisationServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.organisation.service.OrganisationService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.location.service.LocationServiceImpl" class="com.systemsjr.jrbase.location.service.LocationServiceImpl" >
        <property name="locationDao" ref="locationDao"/>
        <property name="locationTypeDao" ref="locationTypeDao"/>
        <!-- LocationService service property merge-point -->
    </bean>

    <!-- LocationService Service Proxy with inner LocationService Service Implementation -->
    <bean id="locationService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.location.service.LocationServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.location.service.LocationService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.counter.service.CounterServiceImpl" class="com.systemsjr.jrbase.counter.service.CounterServiceImpl" >
        <property name="counterDao" ref="counterDao"/>
        <!-- CounterService service property merge-point -->
    </bean>

    <!-- CounterService Service Proxy with inner CounterService Service Implementation -->
    <bean id="counterService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.counter.service.CounterServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.counter.service.CounterService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.role.service.RoleServiceImpl" class="com.systemsjr.jrbase.role.service.RoleServiceImpl" >
        <property name="roleDao" ref="roleDao"/>
        <property name="clearanceLevelDao" ref="clearanceLevelDao"/>
        <property name="userDao" ref="userDao"/>
        <!-- RoleService service property merge-point -->
    </bean>

    <!-- RoleService Service Proxy with inner RoleService Service Implementation -->
    <bean id="roleService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.role.service.RoleServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.role.service.RoleService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.clearancelevel.service.ClearanceLevelServiceImpl" class="com.systemsjr.jrbase.clearancelevel.service.ClearanceLevelServiceImpl" >
        <property name="clearanceLevelDao" ref="clearanceLevelDao"/>
        <property name="userDao" ref="userDao"/>
        <property name="roleDao" ref="roleDao"/>
        <!-- ClearanceLevelService service property merge-point -->
    </bean>

    <!-- ClearanceLevelService Service Proxy with inner ClearanceLevelService Service Implementation -->
    <bean id="clearanceLevelService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.clearancelevel.service.ClearanceLevelServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.clearancelevel.service.ClearanceLevelService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.loginsession.service.LoginSessionServiceImpl" class="com.systemsjr.jrbase.loginsession.service.LoginSessionServiceImpl" >
        <property name="loginSessionDao" ref="loginSessionDao"/>
        <property name="locationDao" ref="locationDao"/>
        <property name="userDao" ref="userDao"/>
        <!-- LoginSessionService service property merge-point -->
    </bean>

    <!-- LoginSessionService Service Proxy with inner LoginSessionService Service Implementation -->
    <bean id="loginSessionService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.loginsession.service.LoginSessionServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.loginsession.service.LoginSessionService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.workbench.program.service.ProgramServiceImpl" class="com.systemsjr.jrbase.workbench.program.service.ProgramServiceImpl" >
        <property name="programDao" ref="programDao"/>
        <!-- ProgramService service property merge-point -->
    </bean>

    <!-- ProgramService Service Proxy with inner ProgramService Service Implementation -->
    <bean id="programService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.workbench.program.service.ProgramServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.workbench.program.service.ProgramService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <bean id="com.systemsjr.jrbase.workbench.menu.service.MenuServiceImpl" class="com.systemsjr.jrbase.workbench.menu.service.MenuServiceImpl" >
        <property name="menuDao" ref="menuDao"/>
        <!-- MenuService service property merge-point -->
    </bean>

    <!-- MenuService Service Proxy with inner MenuService Service Implementation -->
    <bean id="menuService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="com.systemsjr.jrbase.workbench.menu.service.MenuServiceImpl"/>
        <property name="proxyInterfaces" value="com.systemsjr.jrbase.workbench.menu.service.MenuService"/>
        <property name="interceptorNames">
            <list>
                <value>serviceTransactionInterceptor</value>
                <value>hibernateInterceptor</value>
            </list>
        </property>
    </bean>

    <!-- ========================= End of SERVICE DEFINITIONS ========================= -->

</beans>
