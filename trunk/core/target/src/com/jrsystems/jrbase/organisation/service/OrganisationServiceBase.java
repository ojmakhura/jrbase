// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.organisation.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.organisation.service.OrganisationService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.organisation.service.OrganisationService
 */
public abstract class OrganisationServiceBase
    implements com.jrsystems.jrbase.organisation.service.OrganisationService
{

    private com.jrsystems.jrbase.organisation.OrganisationDao organisationDao;

    /**
     * Sets the reference to <code>organisation</code>'s DAO.
     */
    public void setOrganisationDao(com.jrsystems.jrbase.organisation.OrganisationDao organisationDao)
    {
        this.organisationDao = organisationDao;
    }

    /**
     * Gets the reference to <code>organisation</code>'s DAO.
     */
    protected com.jrsystems.jrbase.organisation.OrganisationDao getOrganisationDao()
    {
        return this.organisationDao;
    }

    private com.jrsystems.jrbase.location.LocationDao locationDao;

    /**
     * Sets the reference to <code>location</code>'s DAO.
     */
    public void setLocationDao(com.jrsystems.jrbase.location.LocationDao locationDao)
    {
        this.locationDao = locationDao;
    }

    /**
     * Gets the reference to <code>location</code>'s DAO.
     */
    protected com.jrsystems.jrbase.location.LocationDao getLocationDao()
    {
        return this.locationDao;
    }

    private com.jrsystems.jrbase.organisation.OrganisationTypeDao organisationTypeDao;

    /**
     * Sets the reference to <code>organisationType</code>'s DAO.
     */
    public void setOrganisationTypeDao(com.jrsystems.jrbase.organisation.OrganisationTypeDao organisationTypeDao)
    {
        this.organisationTypeDao = organisationTypeDao;
    }

    /**
     * Gets the reference to <code>organisationType</code>'s DAO.
     */
    protected com.jrsystems.jrbase.organisation.OrganisationTypeDao getOrganisationTypeDao()
    {
        return this.organisationTypeDao;
    }

    /**
     * @see com.jrsystems.jrbase.organisation.service.OrganisationService#getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO)
     */
    public java.util.List getOrganisationBranches(final com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO)
    {
        if (organisationVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO' can not be null");
        }
        if (organisationVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.id' can not be null");
        }
        if (organisationVO.getDescription() == null || organisationVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.description' can not be null or empty");
        }
        if (organisationVO.getName() == null || organisationVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.name' can not be null or empty");
        }
        if (organisationVO.getRegistrationRef() == null || organisationVO.getRegistrationRef().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.registrationRef' can not be null or empty");
        }
        if (organisationVO.getOrganisationType() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.organisationType' can not be null");
        }
        if (organisationVO.getOrganisationLocations() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.organisationLocations' can not be null");
        }
        if (organisationVO.getParent() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.parent' can not be null");
        }
        try
        {
            return this.handleGetOrganisationBranches(organisationVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.organisation.service.OrganisationServiceException(
                "Error performing 'com.jrsystems.jrbase.organisation.service.OrganisationService.getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO)}
      */
    protected abstract java.util.List handleGetOrganisationBranches(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.organisation.service.OrganisationService#saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO)
     */
    public com.jrsystems.jrbase.organisation.vo.OrganisationVO saveOrganisation(final com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO)
    {
        if (organisatioVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO' can not be null");
        }
        if (organisatioVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO.id' can not be null");
        }
        if (organisatioVO.getDescription() == null || organisatioVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO.description' can not be null or empty");
        }
        if (organisatioVO.getName() == null || organisatioVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO.name' can not be null or empty");
        }
        if (organisatioVO.getRegistrationRef() == null || organisatioVO.getRegistrationRef().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO.registrationRef' can not be null or empty");
        }
        if (organisatioVO.getOrganisationType() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO.organisationType' can not be null");
        }
        if (organisatioVO.getOrganisationLocations() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO.organisationLocations' can not be null");
        }
        if (organisatioVO.getParent() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO) - 'organisatioVO.parent' can not be null");
        }
        try
        {
            return this.handleSaveOrganisation(organisatioVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.organisation.service.OrganisationServiceException(
                "Error performing 'com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO)}
      */
    protected abstract com.jrsystems.jrbase.organisation.vo.OrganisationVO handleSaveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisatioVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.organisation.service.OrganisationService#saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO)
     */
    public com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO saveOrganisationType(final com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO)
    {
        if (organisationTypeVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO' can not be null");
        }
        if (organisationTypeVO.getLevelCode() == null || organisationTypeVO.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.levelCode' can not be null or empty");
        }
        if (organisationTypeVO.getName() == null || organisationTypeVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.name' can not be null or empty");
        }
        if (organisationTypeVO.getDescription() == null || organisationTypeVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.description' can not be null or empty");
        }
        if (organisationTypeVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.id' can not be null");
        }
        try
        {
            return this.handleSaveOrganisationType(organisationTypeVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.organisation.service.OrganisationServiceException(
                "Error performing 'com.jrsystems.jrbase.organisation.service.OrganisationService.saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO)}
      */
    protected abstract com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO handleSaveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.organisation.service.OrganisationService#getAllOrganisations()
     */
    public java.util.List getAllOrganisations()
    {
        try
        {
            return this.handleGetAllOrganisations();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.organisation.service.OrganisationServiceException(
                "Error performing 'com.jrsystems.jrbase.organisation.service.OrganisationService.getAllOrganisations()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllOrganisations()}
      */
    protected abstract java.util.List handleGetAllOrganisations()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.organisation.service.OrganisationService#getAllOrganisationTypes()
     */
    public java.util.List getAllOrganisationTypes()
    {
        try
        {
            return this.handleGetAllOrganisationTypes();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.organisation.service.OrganisationServiceException(
                "Error performing 'com.jrsystems.jrbase.organisation.service.OrganisationService.getAllOrganisationTypes()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllOrganisationTypes()}
      */
    protected abstract java.util.List handleGetAllOrganisationTypes()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.organisation.service.OrganisationService#removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO)
     */
    public void removeOrganisation(final com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO)
    {
        if (organisationVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO' can not be null");
        }
        if (organisationVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.id' can not be null");
        }
        if (organisationVO.getDescription() == null || organisationVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.description' can not be null or empty");
        }
        if (organisationVO.getName() == null || organisationVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.name' can not be null or empty");
        }
        if (organisationVO.getRegistrationRef() == null || organisationVO.getRegistrationRef().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.registrationRef' can not be null or empty");
        }
        if (organisationVO.getOrganisationType() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.organisationType' can not be null");
        }
        if (organisationVO.getOrganisationLocations() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.organisationLocations' can not be null");
        }
        if (organisationVO.getParent() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO) - 'organisationVO.parent' can not be null");
        }
        try
        {
            this.handleRemoveOrganisation(organisationVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.organisation.service.OrganisationServiceException(
                "Error performing 'com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO)}
      */
    protected abstract void handleRemoveOrganisation(com.jrsystems.jrbase.organisation.vo.OrganisationVO organisationVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.organisation.service.OrganisationService#removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO)
     */
    public void removeOrganisationType(final com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO)
    {
        if (organisationTypeVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO' can not be null");
        }
        if (organisationTypeVO.getLevelCode() == null || organisationTypeVO.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.levelCode' can not be null or empty");
        }
        if (organisationTypeVO.getName() == null || organisationTypeVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.name' can not be null or empty");
        }
        if (organisationTypeVO.getDescription() == null || organisationTypeVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.description' can not be null or empty");
        }
        if (organisationTypeVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO) - 'organisationTypeVO.id' can not be null");
        }
        try
        {
            this.handleRemoveOrganisationType(organisationTypeVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.organisation.service.OrganisationServiceException(
                "Error performing 'com.jrsystems.jrbase.organisation.service.OrganisationService.removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO)}
      */
    protected abstract void handleRemoveOrganisationType(com.jrsystems.jrbase.organisation.vo.OrganisationTypeVO organisationTypeVO)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}