// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.role.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.role.service.RoleService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.role.service.RoleService
 */
public abstract class RoleServiceBase
    implements com.jrsystems.jrbase.role.service.RoleService
{

    private com.jrsystems.jrbase.role.RoleDao roleDao;

    /**
     * Sets the reference to <code>role</code>'s DAO.
     */
    public void setRoleDao(com.jrsystems.jrbase.role.RoleDao roleDao)
    {
        this.roleDao = roleDao;
    }

    /**
     * Gets the reference to <code>role</code>'s DAO.
     */
    protected com.jrsystems.jrbase.role.RoleDao getRoleDao()
    {
        return this.roleDao;
    }

    private com.jrsystems.jrbase.clearancelevel.ClearanceLevelDao clearanceLevelDao;

    /**
     * Sets the reference to <code>clearanceLevel</code>'s DAO.
     */
    public void setClearanceLevelDao(com.jrsystems.jrbase.clearancelevel.ClearanceLevelDao clearanceLevelDao)
    {
        this.clearanceLevelDao = clearanceLevelDao;
    }

    /**
     * Gets the reference to <code>clearanceLevel</code>'s DAO.
     */
    protected com.jrsystems.jrbase.clearancelevel.ClearanceLevelDao getClearanceLevelDao()
    {
        return this.clearanceLevelDao;
    }

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>user</code>'s DAO.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>user</code>'s DAO.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    /**
     * @see com.jrsystems.jrbase.role.service.RoleService#saveRole(com.jrsystems.jrbase.role.vo.RoleVO)
     */
    public com.jrsystems.jrbase.role.vo.RoleVO saveRole(final com.jrsystems.jrbase.role.vo.RoleVO roleVO)
    {
        if (roleVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO' can not be null");
        }
        if (roleVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.id' can not be null");
        }
        if (roleVO.getRole() == null || roleVO.getRole().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.role' can not be null or empty");
        }
        if (roleVO.getRoleDescription() == null || roleVO.getRoleDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleDescription' can not be null or empty");
        }
        if (roleVO.getRoleCode() == null || roleVO.getRoleCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleCode' can not be null or empty");
        }
        if (roleVO.getRoleClearanceLevels() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleClearanceLevels' can not be null");
        }
        if (roleVO.getUsers() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.users' can not be null");
        }
        try
        {
            return this.handleSaveRole(roleVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.role.service.RoleServiceException(
                "Error performing 'com.jrsystems.jrbase.role.service.RoleService.saveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveRole(com.jrsystems.jrbase.role.vo.RoleVO)}
      */
    protected abstract com.jrsystems.jrbase.role.vo.RoleVO handleSaveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.role.service.RoleService#getAllRoles()
     */
    public java.util.List getAllRoles()
    {
        try
        {
            return this.handleGetAllRoles();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.role.service.RoleServiceException(
                "Error performing 'com.jrsystems.jrbase.role.service.RoleService.getAllRoles()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllRoles()}
      */
    protected abstract java.util.List handleGetAllRoles()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.role.service.RoleService#getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO)
     */
    public java.util.List getRolesByClearance(final com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO)
    {
        if (clearanceVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO) - 'clearanceVO' can not be null");
        }
        if (clearanceVO.getLowerLevel() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO) - 'clearanceVO.lowerLevel' can not be null");
        }
        if (clearanceVO.getUpperLevel() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO) - 'clearanceVO.upperLevel' can not be null");
        }
        if (clearanceVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO) - 'clearanceVO.id' can not be null");
        }
        if (clearanceVO.getLevelCode() == null || clearanceVO.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO) - 'clearanceVO.levelCode' can not be null or empty");
        }
        if (clearanceVO.getLevelDescription() == null || clearanceVO.getLevelDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO) - 'clearanceVO.levelDescription' can not be null or empty");
        }
        try
        {
            return this.handleGetRolesByClearance(clearanceVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.role.service.RoleServiceException(
                "Error performing 'com.jrsystems.jrbase.role.service.RoleService.getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO)}
      */
    protected abstract java.util.List handleGetRolesByClearance(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.role.service.RoleService#getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO)
     */
    public java.util.List getRoleClearanceLevels(final com.jrsystems.jrbase.role.vo.RoleVO roleVO)
    {
        if (roleVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO' can not be null");
        }
        if (roleVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.id' can not be null");
        }
        if (roleVO.getRole() == null || roleVO.getRole().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.role' can not be null or empty");
        }
        if (roleVO.getRoleDescription() == null || roleVO.getRoleDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleDescription' can not be null or empty");
        }
        if (roleVO.getRoleCode() == null || roleVO.getRoleCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleCode' can not be null or empty");
        }
        if (roleVO.getRoleClearanceLevels() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleClearanceLevels' can not be null");
        }
        if (roleVO.getUsers() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.users' can not be null");
        }
        try
        {
            return this.handleGetRoleClearanceLevels(roleVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.role.service.RoleServiceException(
                "Error performing 'com.jrsystems.jrbase.role.service.RoleService.getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO)}
      */
    protected abstract java.util.List handleGetRoleClearanceLevels(com.jrsystems.jrbase.role.vo.RoleVO roleVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.role.service.RoleService#removeRole(com.jrsystems.jrbase.role.vo.RoleVO)
     */
    public void removeRole(final com.jrsystems.jrbase.role.vo.RoleVO roleVO)
    {
        if (roleVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO' can not be null");
        }
        if (roleVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.id' can not be null");
        }
        if (roleVO.getRole() == null || roleVO.getRole().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.role' can not be null or empty");
        }
        if (roleVO.getRoleDescription() == null || roleVO.getRoleDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleDescription' can not be null or empty");
        }
        if (roleVO.getRoleCode() == null || roleVO.getRoleCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleCode' can not be null or empty");
        }
        if (roleVO.getRoleClearanceLevels() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.roleClearanceLevels' can not be null");
        }
        if (roleVO.getUsers() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO) - 'roleVO.users' can not be null");
        }
        try
        {
            this.handleRemoveRole(roleVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.role.service.RoleServiceException(
                "Error performing 'com.jrsystems.jrbase.role.service.RoleService.removeRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeRole(com.jrsystems.jrbase.role.vo.RoleVO)}
      */
    protected abstract void handleRemoveRole(com.jrsystems.jrbase.role.vo.RoleVO roleVO)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}