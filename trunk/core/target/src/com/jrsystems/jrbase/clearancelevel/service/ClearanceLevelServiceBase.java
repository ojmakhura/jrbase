// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.clearancelevel.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService
 */
public abstract class ClearanceLevelServiceBase
    implements com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService
{

    private com.jrsystems.jrbase.clearancelevel.ClearanceLevelDao clearanceLevelDao;

    /**
     * Sets the reference to <code>clearanceLevel</code>'s DAO.
     */
    public void setClearanceLevelDao(com.jrsystems.jrbase.clearancelevel.ClearanceLevelDao clearanceLevelDao)
    {
        this.clearanceLevelDao = clearanceLevelDao;
    }

    /**
     * Gets the reference to <code>clearanceLevel</code>'s DAO.
     */
    protected com.jrsystems.jrbase.clearancelevel.ClearanceLevelDao getClearanceLevelDao()
    {
        return this.clearanceLevelDao;
    }

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>user</code>'s DAO.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>user</code>'s DAO.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    private com.jrsystems.jrbase.role.RoleDao roleDao;

    /**
     * Sets the reference to <code>role</code>'s DAO.
     */
    public void setRoleDao(com.jrsystems.jrbase.role.RoleDao roleDao)
    {
        this.roleDao = roleDao;
    }

    /**
     * Gets the reference to <code>role</code>'s DAO.
     */
    protected com.jrsystems.jrbase.role.RoleDao getRoleDao()
    {
        return this.roleDao;
    }

    /**
     * @see com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService#saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO)
     */
    public com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO saveClearanceLevel(final com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO)
    {
        if (clearanceLevelVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO) - 'clearanceLevelVO' can not be null");
        }
        if (clearanceLevelVO.getLowerLevel() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO) - 'clearanceLevelVO.lowerLevel' can not be null");
        }
        if (clearanceLevelVO.getUpperLevel() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO) - 'clearanceLevelVO.upperLevel' can not be null");
        }
        if (clearanceLevelVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO) - 'clearanceLevelVO.id' can not be null");
        }
        if (clearanceLevelVO.getLevelCode() == null || clearanceLevelVO.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO) - 'clearanceLevelVO.levelCode' can not be null or empty");
        }
        if (clearanceLevelVO.getLevelDescription() == null || clearanceLevelVO.getLevelDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO) - 'clearanceLevelVO.levelDescription' can not be null or empty");
        }
        try
        {
            return this.handleSaveClearanceLevel(clearanceLevelVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelServiceException(
                "Error performing 'com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO)}
      */
    protected abstract com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO handleSaveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService#getAllClearanceLevels()
     */
    public java.util.List getAllClearanceLevels()
    {
        try
        {
            return this.handleGetAllClearanceLevels();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelServiceException(
                "Error performing 'com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.getAllClearanceLevels()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllClearanceLevels()}
      */
    protected abstract java.util.List handleGetAllClearanceLevels()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService#removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO)
     */
    public void removeClearanceLevel(final com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo)
    {
        if (clearanceLevelVo == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo) - 'clearanceLevelVo' can not be null");
        }
        if (clearanceLevelVo.getLowerLevel() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo) - 'clearanceLevelVo.lowerLevel' can not be null");
        }
        if (clearanceLevelVo.getUpperLevel() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo) - 'clearanceLevelVo.upperLevel' can not be null");
        }
        if (clearanceLevelVo.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo) - 'clearanceLevelVo.id' can not be null");
        }
        if (clearanceLevelVo.getLevelCode() == null || clearanceLevelVo.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo) - 'clearanceLevelVo.levelCode' can not be null or empty");
        }
        if (clearanceLevelVo.getLevelDescription() == null || clearanceLevelVo.getLevelDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo) - 'clearanceLevelVo.levelDescription' can not be null or empty");
        }
        try
        {
            this.handleRemoveClearanceLevel(clearanceLevelVo);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelServiceException(
                "Error performing 'com.jrsystems.jrbase.clearancelevel.service.ClearanceLevelService.removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO)}
      */
    protected abstract void handleRemoveClearanceLevel(com.jrsystems.jrbase.clearancelevel.vo.ClearanceLevelVO clearanceLevelVo)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}