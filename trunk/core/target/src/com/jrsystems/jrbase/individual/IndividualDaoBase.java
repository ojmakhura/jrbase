// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.individual;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.jrsystems.jrbase.individual.Individual</code>.
 * </p>
 *
 * @see com.jrsystems.jrbase.individual.Individual
 */
public abstract class IndividualDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements com.jrsystems.jrbase.individual.IndividualDao
{

    private com.jrsystems.jrbase.location.LocationDao locationDao;

    /**
     * Sets the reference to <code>locationDao</code>.
     */
    public void setLocationDao(com.jrsystems.jrbase.location.LocationDao locationDao)
    {
        this.locationDao = locationDao;
    }

    /**
     * Gets the reference to <code>locationDao</code>.
     */
    protected com.jrsystems.jrbase.location.LocationDao getLocationDao()
    {
        return this.locationDao;
    }

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>userDao</code>.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>userDao</code>.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Individual.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(com.jrsystems.jrbase.individual.IndividualImpl.class, id);
        return transformEntity(transform, (com.jrsystems.jrbase.individual.Individual)entity);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#load(java.lang.Long)
     */
    public com.jrsystems.jrbase.individual.Individual load(java.lang.Long id)
    {
        return (com.jrsystems.jrbase.individual.Individual)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(com.jrsystems.jrbase.individual.IndividualImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(com.jrsystems.jrbase.individual.Individual)
     */
    public com.jrsystems.jrbase.individual.Individual create(com.jrsystems.jrbase.individual.Individual individual)
    {
        return (com.jrsystems.jrbase.individual.Individual)this.create(TRANSFORM_NONE, individual);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(int transform, com.jrsystems.jrbase.individual.Individual)
     */
    public java.lang.Object create(final int transform, final com.jrsystems.jrbase.individual.Individual individual)
    {
        if (individual == null)
        {
            throw new IllegalArgumentException(
                "Individual.create - 'individual' can not be null");
        }
        this.getHibernateTemplate().save(individual);
        return this.transformEntity(transform, individual);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Individual.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (com.jrsystems.jrbase.individual.Individual)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(java.lang.String, java.lang.String, com.jrsystems.jrbase.individual.Salutation, java.lang.String, java.lang.String, java.lang.String, com.jrsystems.jrbase.individual.Gender, java.lang.String, java.lang.String, java.lang.String, java.util.Date)
     */
    public com.jrsystems.jrbase.individual.Individual create(
        java.lang.String individualId,
        java.lang.String idNumber,
        com.jrsystems.jrbase.individual.Salutation salutation,
        java.lang.String surname,
        java.lang.String firstName,
        java.lang.String middleNames,
        com.jrsystems.jrbase.individual.Gender sex,
        java.lang.String postalAddress,
        java.lang.String physicalAddress,
        java.lang.String email,
        java.util.Date dob)
    {
        return (com.jrsystems.jrbase.individual.Individual)this.create(TRANSFORM_NONE, individualId, idNumber, salutation, surname, firstName, middleNames, sex, postalAddress, physicalAddress, email, dob);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(int, java.lang.String, java.lang.String, com.jrsystems.jrbase.individual.Salutation, java.lang.String, java.lang.String, java.lang.String, com.jrsystems.jrbase.individual.Gender, java.lang.String, java.lang.String, java.lang.String, java.util.Date)
     */
    public java.lang.Object create(
        final int transform,
        java.lang.String individualId,
        java.lang.String idNumber,
        com.jrsystems.jrbase.individual.Salutation salutation,
        java.lang.String surname,
        java.lang.String firstName,
        java.lang.String middleNames,
        com.jrsystems.jrbase.individual.Gender sex,
        java.lang.String postalAddress,
        java.lang.String physicalAddress,
        java.lang.String email,
        java.util.Date dob)
    {
        com.jrsystems.jrbase.individual.Individual entity = new com.jrsystems.jrbase.individual.IndividualImpl();
        entity.setIndividualId(individualId);
        entity.setIdNumber(idNumber);
        entity.setSalutation(salutation);
        entity.setSurname(surname);
        entity.setFirstName(firstName);
        entity.setMiddleNames(middleNames);
        entity.setSex(sex);
        entity.setPostalAddress(postalAddress);
        entity.setPhysicalAddress(physicalAddress);
        entity.setEmail(email);
        entity.setDob(dob);
        return this.create(transform, entity);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(com.jrsystems.jrbase.location.Location, com.jrsystems.jrbase.location.Location, java.util.Date, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.jrsystems.jrbase.individual.Salutation, com.jrsystems.jrbase.individual.Gender, java.lang.String)
     */
    public com.jrsystems.jrbase.individual.Individual create(
        com.jrsystems.jrbase.location.Location countryOfBirth,
        com.jrsystems.jrbase.location.Location countryOfCitizenship,
        java.util.Date dob,
        java.lang.String firstName,
        java.lang.String idNumber,
        java.lang.String individualId,
        java.lang.String physicalAddress,
        java.lang.String postalAddress,
        com.jrsystems.jrbase.individual.Salutation salutation,
        com.jrsystems.jrbase.individual.Gender sex,
        java.lang.String surname)
    {
        return (com.jrsystems.jrbase.individual.Individual)this.create(TRANSFORM_NONE, countryOfBirth, countryOfCitizenship, dob, firstName, idNumber, individualId, physicalAddress, postalAddress, salutation, sex, surname);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#create(int, com.jrsystems.jrbase.location.Location, com.jrsystems.jrbase.location.Location, java.util.Date, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.jrsystems.jrbase.individual.Salutation, com.jrsystems.jrbase.individual.Gender, java.lang.String)
     */
    public java.lang.Object create(
        final int transform,
        com.jrsystems.jrbase.location.Location countryOfBirth,
        com.jrsystems.jrbase.location.Location countryOfCitizenship,
        java.util.Date dob,
        java.lang.String firstName,
        java.lang.String idNumber,
        java.lang.String individualId,
        java.lang.String physicalAddress,
        java.lang.String postalAddress,
        com.jrsystems.jrbase.individual.Salutation salutation,
        com.jrsystems.jrbase.individual.Gender sex,
        java.lang.String surname)
    {
        com.jrsystems.jrbase.individual.Individual entity = new com.jrsystems.jrbase.individual.IndividualImpl();
        entity.setCountryOfBirth(countryOfBirth);
        entity.setCountryOfCitizenship(countryOfCitizenship);
        entity.setDob(dob);
        entity.setFirstName(firstName);
        entity.setIdNumber(idNumber);
        entity.setIndividualId(individualId);
        entity.setPhysicalAddress(physicalAddress);
        entity.setPostalAddress(postalAddress);
        entity.setSalutation(salutation);
        entity.setSex(sex);
        entity.setSurname(surname);
        return this.create(transform, entity);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#update(com.jrsystems.jrbase.individual.Individual)
     */
    public void update(com.jrsystems.jrbase.individual.Individual individual)
    {
        if (individual == null)
        {
            throw new IllegalArgumentException(
                "Individual.update - 'individual' can not be null");
        }
        this.getHibernateTemplate().update(individual);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Individual.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((com.jrsystems.jrbase.individual.Individual)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#remove(com.jrsystems.jrbase.individual.Individual)
     */
    public void remove(com.jrsystems.jrbase.individual.Individual individual)
    {
        if (individual == null)
        {
            throw new IllegalArgumentException(
                "Individual.remove - 'individual' can not be null");
        }
        this.getHibernateTemplate().delete(individual);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Individual.remove - 'id' can not be null");
        }
        com.jrsystems.jrbase.individual.Individual entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Individual.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#findByCriteria(com.jrsystems.jrbase.individual.vo.IndividualSearchCriteria)
     */
    public java.util.List findByCriteria(final com.jrsystems.jrbase.individual.vo.IndividualSearchCriteria searchCriteria)
    {
        if (searchCriteria == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.IndividualDao.findByCriteria(com.jrsystems.jrbase.individual.vo.IndividualSearchCriteria searchCriteria) - 'searchCriteria' can not be null");
        }
        try
        {
            return this.handleFindByCriteria(searchCriteria);
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'com.jrsystems.jrbase.individual.IndividualDao.findByCriteria(com.jrsystems.jrbase.individual.vo.IndividualSearchCriteria searchCriteria)' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #findByCriteria(com.jrsystems.jrbase.individual.vo.IndividualSearchCriteria)}
      */
    protected abstract java.util.List handleFindByCriteria(com.jrsystems.jrbase.individual.vo.IndividualSearchCriteria searchCriteria)
        throws java.lang.Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>com.jrsystems.jrbase.individual.IndividualDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link com.jrsystems.jrbase.individual.Individual} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link com.jrsystems.jrbase.individual.vo.IndividualVO} - {@link TRANSFORM_INDIVIDUALVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link com.jrsystems.jrbase.individual.IndividualDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final com.jrsystems.jrbase.individual.Individual entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_INDIVIDUALVO :
                    target = toIndividualVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,com.jrsystems.jrbase.individual.Individual)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>com.jrsystems.jrbase.individual.IndividualDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,com.jrsystems.jrbase.individual.Individual)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_INDIVIDUALVO :
                toIndividualVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link com.jrsystems.jrbase.individual.Individual}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof com.jrsystems.jrbase.individual.Individual)
                {
                    result = input;
                }
                return result;
            }
        };

    protected com.jrsystems.jrbase.individual.Individual toEntity(java.lang.Object[] row)
    {
        com.jrsystems.jrbase.individual.Individual target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof com.jrsystems.jrbase.individual.Individual)
                {
                    target = (com.jrsystems.jrbase.individual.Individual)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#toIndividualVOCollection(java.util.Collection)
     */
    public final void toIndividualVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, INDIVIDUALVO_TRANSFORMER);
        }
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#toIndividualVOArray(java.util.Collection)
     */
    public final com.jrsystems.jrbase.individual.vo.IndividualVO[] toIndividualVOArray(java.util.Collection entities)
    {
        com.jrsystems.jrbase.individual.vo.IndividualVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toIndividualVOCollection(collection);
            result = (com.jrsystems.jrbase.individual.vo.IndividualVO[]) collection.toArray(new com.jrsystems.jrbase.individual.vo.IndividualVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link IndividualDaoImpl} class if you intend to use reporting queries.
     * @see com.jrsystems.jrbase.individual.IndividualDao#toIndividualVO(com.jrsystems.jrbase.individual.Individual)
     */
    protected com.jrsystems.jrbase.individual.vo.IndividualVO toIndividualVO(java.lang.Object[] row)
    {
        return this.toIndividualVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link com.jrsystems.jrbase.individual.vo.IndividualVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer INDIVIDUALVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof com.jrsystems.jrbase.individual.Individual)
                {
                    result = toIndividualVO((com.jrsystems.jrbase.individual.Individual)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toIndividualVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#individualVOToEntityCollection(java.util.Collection)
     */
    public final void individualVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof com.jrsystems.jrbase.individual.vo.IndividualVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, IndividualVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer IndividualVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return individualVOToEntity((com.jrsystems.jrbase.individual.vo.IndividualVO)input);
            }
        };


    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#toIndividualVO(com.jrsystems.jrbase.individual.Individual, com.jrsystems.jrbase.individual.vo.IndividualVO)
     */
    public void toIndividualVO(
        com.jrsystems.jrbase.individual.Individual source,
        com.jrsystems.jrbase.individual.vo.IndividualVO target)
    {
        target.setId(source.getId());
        target.setSalutation(source.getSalutation());
        target.setSex(source.getSex());
        // No conversion for target.nextOfKin (can't convert source.getNextOfKin():com.jrsystems.jrbase.individual.Individual to com.jrsystems.jrbase.individual.vo.IndividualVO)
        // No conversion for target.countryOfBirth (can't convert source.getCountryOfBirth():com.jrsystems.jrbase.location.Location to com.jrsystems.jrbase.location.vo.LocationVO)
        // No conversion for target.countryOfCitizenship (can't convert source.getCountryOfCitizenship():com.jrsystems.jrbase.location.Location to com.jrsystems.jrbase.location.vo.LocationVO)
        target.setFirstName(source.getFirstName());
        target.setSurname(source.getSurname());
        target.setMiddleNames(source.getMiddleNames());
        target.setIdNumber(source.getIdNumber());
        target.setIndividualId(source.getIndividualId());
        target.setPostalAddress(source.getPostalAddress());
        target.setPhysicalAddress(source.getPhysicalAddress());
        target.setEmail(source.getEmail());
        target.setDob(source.getDob());
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#toIndividualVO(com.jrsystems.jrbase.individual.Individual)
     */
    public com.jrsystems.jrbase.individual.vo.IndividualVO toIndividualVO(final com.jrsystems.jrbase.individual.Individual entity)
    {
        com.jrsystems.jrbase.individual.vo.IndividualVO target = null;
        if (entity != null)
        {
            target = new com.jrsystems.jrbase.individual.vo.IndividualVO();
            this.toIndividualVO(entity, target);
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#individualVOToEntity(com.jrsystems.jrbase.individual.vo.IndividualVO, com.jrsystems.jrbase.individual.Individual)
     */
    public void individualVOToEntity(
        com.jrsystems.jrbase.individual.vo.IndividualVO source,
        com.jrsystems.jrbase.individual.Individual target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getIndividualId() != null)
        {
            target.setIndividualId(source.getIndividualId());
        }
        if (copyIfNull || source.getIdNumber() != null)
        {
            target.setIdNumber(source.getIdNumber());
        }
        if (copyIfNull || source.getSalutation() != null)
        {
            target.setSalutation(source.getSalutation());
        }
        if (copyIfNull || source.getSurname() != null)
        {
            target.setSurname(source.getSurname());
        }
        if (copyIfNull || source.getFirstName() != null)
        {
            target.setFirstName(source.getFirstName());
        }
        if (copyIfNull || source.getMiddleNames() != null)
        {
            target.setMiddleNames(source.getMiddleNames());
        }
        if (copyIfNull || source.getSex() != null)
        {
            target.setSex(source.getSex());
        }
        if (copyIfNull || source.getPostalAddress() != null)
        {
            target.setPostalAddress(source.getPostalAddress());
        }
        if (copyIfNull || source.getPhysicalAddress() != null)
        {
            target.setPhysicalAddress(source.getPhysicalAddress());
        }
        if (copyIfNull || source.getEmail() != null)
        {
            target.setEmail(source.getEmail());
        }
        if (copyIfNull || source.getDob() != null)
        {
            target.setDob(source.getDob());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#search(int, int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.individual.IndividualImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new com.jrsystems.jrbase.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#search(int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#search(int, com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final int transform, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.individual.IndividualImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.individual.IndividualDao#search(com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}