// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.individual.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.individual.service.IndividualService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.individual.service.IndividualService
 */
public abstract class IndividualServiceBase
    implements com.jrsystems.jrbase.individual.service.IndividualService
{

    private com.jrsystems.jrbase.individual.IndividualDao individualDao;

    /**
     * Sets the reference to <code>individual</code>'s DAO.
     */
    public void setIndividualDao(com.jrsystems.jrbase.individual.IndividualDao individualDao)
    {
        this.individualDao = individualDao;
    }

    /**
     * Gets the reference to <code>individual</code>'s DAO.
     */
    protected com.jrsystems.jrbase.individual.IndividualDao getIndividualDao()
    {
        return this.individualDao;
    }

    private com.jrsystems.jrbase.location.LocationDao locationDao;

    /**
     * Sets the reference to <code>location</code>'s DAO.
     */
    public void setLocationDao(com.jrsystems.jrbase.location.LocationDao locationDao)
    {
        this.locationDao = locationDao;
    }

    /**
     * Gets the reference to <code>location</code>'s DAO.
     */
    protected com.jrsystems.jrbase.location.LocationDao getLocationDao()
    {
        return this.locationDao;
    }

    private com.jrsystems.jrbase.location.LocationTypeDao locationTypeDao;

    /**
     * Sets the reference to <code>locationType</code>'s DAO.
     */
    public void setLocationTypeDao(com.jrsystems.jrbase.location.LocationTypeDao locationTypeDao)
    {
        this.locationTypeDao = locationTypeDao;
    }

    /**
     * Gets the reference to <code>locationType</code>'s DAO.
     */
    protected com.jrsystems.jrbase.location.LocationTypeDao getLocationTypeDao()
    {
        return this.locationTypeDao;
    }

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>user</code>'s DAO.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>user</code>'s DAO.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    /**
     * @see com.jrsystems.jrbase.individual.service.IndividualService#saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO)
     */
    public com.jrsystems.jrbase.individual.vo.IndividualVO saveIndividual(final com.jrsystems.jrbase.individual.vo.IndividualVO individualVO)
    {
        if (individualVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO' can not be null");
        }
        if (individualVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.id' can not be null");
        }
        if (individualVO.getSalutation() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.salutation' can not be null");
        }
        if (individualVO.getSex() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.sex' can not be null");
        }
        if (individualVO.getNextOfKin() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.nextOfKin' can not be null");
        }
        if (individualVO.getCountryOfBirth() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.countryOfBirth' can not be null");
        }
        if (individualVO.getCountryOfCitizenship() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.countryOfCitizenship' can not be null");
        }
        if (individualVO.getFirstName() == null || individualVO.getFirstName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.firstName' can not be null or empty");
        }
        if (individualVO.getSurname() == null || individualVO.getSurname().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.surname' can not be null or empty");
        }
        if (individualVO.getMiddleNames() == null || individualVO.getMiddleNames().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.middleNames' can not be null or empty");
        }
        if (individualVO.getIdNumber() == null || individualVO.getIdNumber().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.idNumber' can not be null or empty");
        }
        if (individualVO.getIndividualId() == null || individualVO.getIndividualId().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.individualId' can not be null or empty");
        }
        if (individualVO.getPostalAddress() == null || individualVO.getPostalAddress().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.postalAddress' can not be null or empty");
        }
        if (individualVO.getPhysicalAddress() == null || individualVO.getPhysicalAddress().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.physicalAddress' can not be null or empty");
        }
        if (individualVO.getEmail() == null || individualVO.getEmail().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.email' can not be null or empty");
        }
        if (individualVO.getDob() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.dob' can not be null");
        }
        try
        {
            return this.handleSaveIndividual(individualVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.individual.service.IndividualServiceException(
                "Error performing 'com.jrsystems.jrbase.individual.service.IndividualService.saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO)}
      */
    protected abstract com.jrsystems.jrbase.individual.vo.IndividualVO handleSaveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.individual.service.IndividualService#getAllIndividuals()
     */
    public java.util.List getAllIndividuals()
    {
        try
        {
            return this.handleGetAllIndividuals();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.individual.service.IndividualServiceException(
                "Error performing 'com.jrsystems.jrbase.individual.service.IndividualService.getAllIndividuals()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllIndividuals()}
      */
    protected abstract java.util.List handleGetAllIndividuals()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.individual.service.IndividualService#removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO)
     */
    public void removeIndividual(final com.jrsystems.jrbase.individual.vo.IndividualVO individualVO)
    {
        if (individualVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO' can not be null");
        }
        if (individualVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.id' can not be null");
        }
        if (individualVO.getSalutation() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.salutation' can not be null");
        }
        if (individualVO.getSex() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.sex' can not be null");
        }
        if (individualVO.getNextOfKin() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.nextOfKin' can not be null");
        }
        if (individualVO.getCountryOfBirth() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.countryOfBirth' can not be null");
        }
        if (individualVO.getCountryOfCitizenship() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.countryOfCitizenship' can not be null");
        }
        if (individualVO.getFirstName() == null || individualVO.getFirstName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.firstName' can not be null or empty");
        }
        if (individualVO.getSurname() == null || individualVO.getSurname().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.surname' can not be null or empty");
        }
        if (individualVO.getMiddleNames() == null || individualVO.getMiddleNames().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.middleNames' can not be null or empty");
        }
        if (individualVO.getIdNumber() == null || individualVO.getIdNumber().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.idNumber' can not be null or empty");
        }
        if (individualVO.getIndividualId() == null || individualVO.getIndividualId().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.individualId' can not be null or empty");
        }
        if (individualVO.getPostalAddress() == null || individualVO.getPostalAddress().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.postalAddress' can not be null or empty");
        }
        if (individualVO.getPhysicalAddress() == null || individualVO.getPhysicalAddress().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.physicalAddress' can not be null or empty");
        }
        if (individualVO.getEmail() == null || individualVO.getEmail().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.email' can not be null or empty");
        }
        if (individualVO.getDob() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO) - 'individualVO.dob' can not be null");
        }
        try
        {
            this.handleRemoveIndividual(individualVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.individual.service.IndividualServiceException(
                "Error performing 'com.jrsystems.jrbase.individual.service.IndividualService.removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO)}
      */
    protected abstract void handleRemoveIndividual(com.jrsystems.jrbase.individual.vo.IndividualVO individualVO)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}