// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.location.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.location.service.LocationService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.location.service.LocationService
 */
public abstract class LocationServiceBase
    implements com.jrsystems.jrbase.location.service.LocationService
{

    private com.jrsystems.jrbase.location.LocationDao locationDao;

    /**
     * Sets the reference to <code>location</code>'s DAO.
     */
    public void setLocationDao(com.jrsystems.jrbase.location.LocationDao locationDao)
    {
        this.locationDao = locationDao;
    }

    /**
     * Gets the reference to <code>location</code>'s DAO.
     */
    protected com.jrsystems.jrbase.location.LocationDao getLocationDao()
    {
        return this.locationDao;
    }

    private com.jrsystems.jrbase.location.LocationTypeDao locationTypeDao;

    /**
     * Sets the reference to <code>locationType</code>'s DAO.
     */
    public void setLocationTypeDao(com.jrsystems.jrbase.location.LocationTypeDao locationTypeDao)
    {
        this.locationTypeDao = locationTypeDao;
    }

    /**
     * Gets the reference to <code>locationType</code>'s DAO.
     */
    protected com.jrsystems.jrbase.location.LocationTypeDao getLocationTypeDao()
    {
        return this.locationTypeDao;
    }

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO)
     */
    public java.util.List getAllAreasByType(final com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)
    {
        if (areaTypeVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO' can not be null");
        }
        if (areaTypeVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.id' can not be null");
        }
        if (areaTypeVO.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.status' can not be null");
        }
        if (areaTypeVO.getLevelCode() == null || areaTypeVO.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.levelCode' can not be null or empty");
        }
        if (areaTypeVO.getName() == null || areaTypeVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.name' can not be null or empty");
        }
        if (areaTypeVO.getDescription() == null || areaTypeVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.description' can not be null or empty");
        }
        try
        {
            return this.handleGetAllAreasByType(areaTypeVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO)}
      */
    protected abstract java.util.List handleGetAllAreasByType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO)
     */
    public java.util.List getAreasInArea(final com.jrsystems.jrbase.location.vo.LocationVO areaVO)
    {
        if (areaVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO' can not be null");
        }
        if (areaVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.id' can not be null");
        }
        if (areaVO.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.status' can not be null");
        }
        if (areaVO.getLocationTypeVO() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.locationTypeVO' can not be null");
        }
        if (areaVO.getDescription() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.description' can not be null");
        }
        if (areaVO.getLocationName() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.locationName' can not be null");
        }
        if (areaVO.getUniqueCode() == null || areaVO.getUniqueCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.uniqueCode' can not be null or empty");
        }
        if (areaVO.getLevelCode() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.levelCode' can not be null");
        }
        try
        {
            return this.handleGetAreasInArea(areaVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO)}
      */
    protected abstract java.util.List handleGetAreasInArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#removeArea(com.jrsystems.jrbase.location.vo.LocationVO)
     */
    public void removeArea(final com.jrsystems.jrbase.location.vo.LocationVO areaVO)
    {
        if (areaVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO' can not be null");
        }
        if (areaVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.id' can not be null");
        }
        if (areaVO.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.status' can not be null");
        }
        if (areaVO.getLocationTypeVO() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.locationTypeVO' can not be null");
        }
        if (areaVO.getDescription() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.description' can not be null");
        }
        if (areaVO.getLocationName() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.locationName' can not be null");
        }
        if (areaVO.getUniqueCode() == null || areaVO.getUniqueCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.uniqueCode' can not be null or empty");
        }
        if (areaVO.getLevelCode() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.levelCode' can not be null");
        }
        try
        {
            this.handleRemoveArea(areaVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.removeArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeArea(com.jrsystems.jrbase.location.vo.LocationVO)}
      */
    protected abstract void handleRemoveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#saveArea(com.jrsystems.jrbase.location.vo.LocationVO)
     */
    public com.jrsystems.jrbase.location.vo.LocationVO saveArea(final com.jrsystems.jrbase.location.vo.LocationVO areaVO)
    {
        if (areaVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO' can not be null");
        }
        if (areaVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.id' can not be null");
        }
        if (areaVO.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.status' can not be null");
        }
        if (areaVO.getLocationTypeVO() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.locationTypeVO' can not be null");
        }
        if (areaVO.getDescription() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.description' can not be null");
        }
        if (areaVO.getLocationName() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.locationName' can not be null");
        }
        if (areaVO.getUniqueCode() == null || areaVO.getUniqueCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.uniqueCode' can not be null or empty");
        }
        if (areaVO.getLevelCode() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO) - 'areaVO.levelCode' can not be null");
        }
        try
        {
            return this.handleSaveArea(areaVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.saveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveArea(com.jrsystems.jrbase.location.vo.LocationVO)}
      */
    protected abstract com.jrsystems.jrbase.location.vo.LocationVO handleSaveArea(com.jrsystems.jrbase.location.vo.LocationVO areaVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO)
     */
    public void removeAreaType(final com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)
    {
        if (areaTypeVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO' can not be null");
        }
        if (areaTypeVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.id' can not be null");
        }
        if (areaTypeVO.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.status' can not be null");
        }
        if (areaTypeVO.getLevelCode() == null || areaTypeVO.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.levelCode' can not be null or empty");
        }
        if (areaTypeVO.getName() == null || areaTypeVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.name' can not be null or empty");
        }
        if (areaTypeVO.getDescription() == null || areaTypeVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.description' can not be null or empty");
        }
        try
        {
            this.handleRemoveAreaType(areaTypeVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO)}
      */
    protected abstract void handleRemoveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO)
     */
    public com.jrsystems.jrbase.location.vo.LocationTypeVO saveAreaType(final com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)
    {
        if (areaTypeVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO' can not be null");
        }
        if (areaTypeVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.id' can not be null");
        }
        if (areaTypeVO.getStatus() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.status' can not be null");
        }
        if (areaTypeVO.getLevelCode() == null || areaTypeVO.getLevelCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.levelCode' can not be null or empty");
        }
        if (areaTypeVO.getName() == null || areaTypeVO.getName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.name' can not be null or empty");
        }
        if (areaTypeVO.getDescription() == null || areaTypeVO.getDescription().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO) - 'areaTypeVO.description' can not be null or empty");
        }
        try
        {
            return this.handleSaveAreaType(areaTypeVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO)}
      */
    protected abstract com.jrsystems.jrbase.location.vo.LocationTypeVO handleSaveAreaType(com.jrsystems.jrbase.location.vo.LocationTypeVO areaTypeVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#getAllAreaTypes()
     */
    public java.util.List getAllAreaTypes()
    {
        try
        {
            return this.handleGetAllAreaTypes();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.getAllAreaTypes()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllAreaTypes()}
      */
    protected abstract java.util.List handleGetAllAreaTypes()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#getAreasByStatus(com.jrsystems.jrbase.location.LocationStatus)
     */
    public java.util.List getAreasByStatus(final com.jrsystems.jrbase.location.LocationStatus status)
    {
        if (status == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreasByStatus(com.jrsystems.jrbase.location.LocationStatus status) - 'status' can not be null");
        }
        try
        {
            return this.handleGetAreasByStatus(status);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.getAreasByStatus(com.jrsystems.jrbase.location.LocationStatus status)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAreasByStatus(com.jrsystems.jrbase.location.LocationStatus)}
      */
    protected abstract java.util.List handleGetAreasByStatus(com.jrsystems.jrbase.location.LocationStatus status)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.location.service.LocationService#getAreaTypesByStatus(com.jrsystems.jrbase.location.LocationStatus)
     */
    public java.util.List getAreaTypesByStatus(final com.jrsystems.jrbase.location.LocationStatus status)
    {
        if (status == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.location.service.LocationService.getAreaTypesByStatus(com.jrsystems.jrbase.location.LocationStatus status) - 'status' can not be null");
        }
        try
        {
            return this.handleGetAreaTypesByStatus(status);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.location.service.LocationServiceException(
                "Error performing 'com.jrsystems.jrbase.location.service.LocationService.getAreaTypesByStatus(com.jrsystems.jrbase.location.LocationStatus status)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAreaTypesByStatus(com.jrsystems.jrbase.location.LocationStatus)}
      */
    protected abstract java.util.List handleGetAreaTypesByStatus(com.jrsystems.jrbase.location.LocationStatus status)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}