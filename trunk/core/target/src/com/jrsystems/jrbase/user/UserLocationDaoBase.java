// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.user;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.jrsystems.jrbase.user.UserLocation</code>.
 * </p>
 *
 * @see com.jrsystems.jrbase.user.UserLocation
 */
public abstract class UserLocationDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements com.jrsystems.jrbase.user.UserLocationDao
{

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>userDao</code>.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>userDao</code>.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    private com.jrsystems.jrbase.location.LocationDao locationDao;

    /**
     * Sets the reference to <code>locationDao</code>.
     */
    public void setLocationDao(com.jrsystems.jrbase.location.LocationDao locationDao)
    {
        this.locationDao = locationDao;
    }

    /**
     * Gets the reference to <code>locationDao</code>.
     */
    protected com.jrsystems.jrbase.location.LocationDao getLocationDao()
    {
        return this.locationDao;
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(com.jrsystems.jrbase.user.UserLocationImpl.class, id);
        return transformEntity(transform, (com.jrsystems.jrbase.user.UserLocation)entity);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#load(java.lang.Long)
     */
    public com.jrsystems.jrbase.user.UserLocation load(java.lang.Long id)
    {
        return (com.jrsystems.jrbase.user.UserLocation)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(com.jrsystems.jrbase.user.UserLocationImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(com.jrsystems.jrbase.user.UserLocation)
     */
    public com.jrsystems.jrbase.user.UserLocation create(com.jrsystems.jrbase.user.UserLocation userLocation)
    {
        return (com.jrsystems.jrbase.user.UserLocation)this.create(TRANSFORM_NONE, userLocation);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(int transform, com.jrsystems.jrbase.user.UserLocation)
     */
    public java.lang.Object create(final int transform, final com.jrsystems.jrbase.user.UserLocation userLocation)
    {
        if (userLocation == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.create - 'userLocation' can not be null");
        }
        this.getHibernateTemplate().save(userLocation);
        return this.transformEntity(transform, userLocation);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (com.jrsystems.jrbase.user.UserLocation)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(com.jrsystems.jrbase.user.UserLocationStatus, java.sql.Timestamp, java.sql.Timestamp)
     */
    public com.jrsystems.jrbase.user.UserLocation create(
        com.jrsystems.jrbase.user.UserLocationStatus status,
        java.sql.Timestamp fromDate,
        java.sql.Timestamp toDate)
    {
        return (com.jrsystems.jrbase.user.UserLocation)this.create(TRANSFORM_NONE, status, fromDate, toDate);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(int, com.jrsystems.jrbase.user.UserLocationStatus, java.sql.Timestamp, java.sql.Timestamp)
     */
    public java.lang.Object create(
        final int transform,
        com.jrsystems.jrbase.user.UserLocationStatus status,
        java.sql.Timestamp fromDate,
        java.sql.Timestamp toDate)
    {
        com.jrsystems.jrbase.user.UserLocation entity = new com.jrsystems.jrbase.user.UserLocationImpl();
        entity.setStatus(status);
        entity.setFromDate(fromDate);
        entity.setToDate(toDate);
        return this.create(transform, entity);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(com.jrsystems.jrbase.location.Location, com.jrsystems.jrbase.user.UserLocationStatus, com.jrsystems.jrbase.user.User)
     */
    public com.jrsystems.jrbase.user.UserLocation create(
        com.jrsystems.jrbase.location.Location location,
        com.jrsystems.jrbase.user.UserLocationStatus status,
        com.jrsystems.jrbase.user.User user)
    {
        return (com.jrsystems.jrbase.user.UserLocation)this.create(TRANSFORM_NONE, location, status, user);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#create(int, com.jrsystems.jrbase.location.Location, com.jrsystems.jrbase.user.UserLocationStatus, com.jrsystems.jrbase.user.User)
     */
    public java.lang.Object create(
        final int transform,
        com.jrsystems.jrbase.location.Location location,
        com.jrsystems.jrbase.user.UserLocationStatus status,
        com.jrsystems.jrbase.user.User user)
    {
        com.jrsystems.jrbase.user.UserLocation entity = new com.jrsystems.jrbase.user.UserLocationImpl();
        entity.setLocation(location);
        entity.setStatus(status);
        entity.setUser(user);
        return this.create(transform, entity);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#update(com.jrsystems.jrbase.user.UserLocation)
     */
    public void update(com.jrsystems.jrbase.user.UserLocation userLocation)
    {
        if (userLocation == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.update - 'userLocation' can not be null");
        }
        this.getHibernateTemplate().update(userLocation);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((com.jrsystems.jrbase.user.UserLocation)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#remove(com.jrsystems.jrbase.user.UserLocation)
     */
    public void remove(com.jrsystems.jrbase.user.UserLocation userLocation)
    {
        if (userLocation == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.remove - 'userLocation' can not be null");
        }
        this.getHibernateTemplate().delete(userLocation);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.remove - 'id' can not be null");
        }
        com.jrsystems.jrbase.user.UserLocation entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "UserLocation.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        return this.findByCriteria(TRANSFORM_NONE, searchCriteria);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(int, com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(final int transform, final com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        return this.findByCriteria(transform, -1, -1, searchCriteria);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(java.lang.String, com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(final java.lang.String queryString, final com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        return this.findByCriteria(TRANSFORM_NONE, queryString, searchCriteria);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(int, int, com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(final int pageNumber, final int pageSize, final com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        return this.findByCriteria(TRANSFORM_NONE, pageNumber, pageSize, searchCriteria);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(String, int, int, com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(final String queryString, final int pageNumber, final int pageSize, final com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        return this.findByCriteria(TRANSFORM_NONE, queryString, pageNumber, pageSize, searchCriteria);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(int, String, com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(final int transform, final String queryString, final com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        return this.findByCriteria(transform, queryString, -1, -1, searchCriteria);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(int, int, int, com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(final int transform, final int pageNumber, final int pageSize, final com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        return this.findByCriteria(transform, "from com.jrsystems.jrbase.user.UserLocation as userLocation where userLocation.searchCriteria = :searchCriteria", pageNumber, pageSize, searchCriteria);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#findByCriteria(int, java.lang.String, int, int, com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria)
     */
    public java.util.List findByCriteria(final int transform, final java.lang.String queryString, int pageNumber, int pageSize, final com.jrsystems.jrbase.user.vo.UserLocationSearchCriteria searchCriteria)
    {
        try
        {
            org.hibernate.Query queryObject = super.getSession(false).createQuery(queryString);
            queryObject.setParameter("searchCriteria", searchCriteria);
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            java.util.List results = queryObject.list();
            transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>com.jrsystems.jrbase.user.UserLocationDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link com.jrsystems.jrbase.user.UserLocation} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link com.jrsystems.jrbase.user.vo.UserLocationVO} - {@link TRANSFORM_USERLOCATIONVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link com.jrsystems.jrbase.user.UserLocationDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final com.jrsystems.jrbase.user.UserLocation entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_USERLOCATIONVO :
                    target = toUserLocationVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,com.jrsystems.jrbase.user.UserLocation)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>com.jrsystems.jrbase.user.UserLocationDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,com.jrsystems.jrbase.user.UserLocation)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_USERLOCATIONVO :
                toUserLocationVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link com.jrsystems.jrbase.user.UserLocation}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof com.jrsystems.jrbase.user.UserLocation)
                {
                    result = input;
                }
                return result;
            }
        };

    protected com.jrsystems.jrbase.user.UserLocation toEntity(java.lang.Object[] row)
    {
        com.jrsystems.jrbase.user.UserLocation target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof com.jrsystems.jrbase.user.UserLocation)
                {
                    target = (com.jrsystems.jrbase.user.UserLocation)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#toUserLocationVOCollection(java.util.Collection)
     */
    public final void toUserLocationVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, USERLOCATIONVO_TRANSFORMER);
        }
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#toUserLocationVOArray(java.util.Collection)
     */
    public final com.jrsystems.jrbase.user.vo.UserLocationVO[] toUserLocationVOArray(java.util.Collection entities)
    {
        com.jrsystems.jrbase.user.vo.UserLocationVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toUserLocationVOCollection(collection);
            result = (com.jrsystems.jrbase.user.vo.UserLocationVO[]) collection.toArray(new com.jrsystems.jrbase.user.vo.UserLocationVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link UserLocationDaoImpl} class if you intend to use reporting queries.
     * @see com.jrsystems.jrbase.user.UserLocationDao#toUserLocationVO(com.jrsystems.jrbase.user.UserLocation)
     */
    protected com.jrsystems.jrbase.user.vo.UserLocationVO toUserLocationVO(java.lang.Object[] row)
    {
        return this.toUserLocationVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link com.jrsystems.jrbase.user.vo.UserLocationVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer USERLOCATIONVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof com.jrsystems.jrbase.user.UserLocation)
                {
                    result = toUserLocationVO((com.jrsystems.jrbase.user.UserLocation)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toUserLocationVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#userLocationVOToEntityCollection(java.util.Collection)
     */
    public final void userLocationVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof com.jrsystems.jrbase.user.vo.UserLocationVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, UserLocationVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer UserLocationVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return userLocationVOToEntity((com.jrsystems.jrbase.user.vo.UserLocationVO)input);
            }
        };


    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#toUserLocationVO(com.jrsystems.jrbase.user.UserLocation, com.jrsystems.jrbase.user.vo.UserLocationVO)
     */
    public void toUserLocationVO(
        com.jrsystems.jrbase.user.UserLocation source,
        com.jrsystems.jrbase.user.vo.UserLocationVO target)
    {
        // No conversion for target.user (can't convert source.getUser():com.jrsystems.jrbase.user.User to com.jrsystems.jrbase.user.vo.UserVO)
        // No conversion for target.location (can't convert source.getLocation():com.jrsystems.jrbase.location.Location to com.jrsystems.jrbase.location.vo.LocationVO)
        target.setFromDate(source.getFromDate());
        target.setToDate(source.getToDate());
        target.setId(source.getId());
        target.setStatus(source.getStatus());
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#toUserLocationVO(com.jrsystems.jrbase.user.UserLocation)
     */
    public com.jrsystems.jrbase.user.vo.UserLocationVO toUserLocationVO(final com.jrsystems.jrbase.user.UserLocation entity)
    {
        com.jrsystems.jrbase.user.vo.UserLocationVO target = null;
        if (entity != null)
        {
            target = new com.jrsystems.jrbase.user.vo.UserLocationVO();
            this.toUserLocationVO(entity, target);
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#userLocationVOToEntity(com.jrsystems.jrbase.user.vo.UserLocationVO, com.jrsystems.jrbase.user.UserLocation)
     */
    public void userLocationVOToEntity(
        com.jrsystems.jrbase.user.vo.UserLocationVO source,
        com.jrsystems.jrbase.user.UserLocation target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getStatus() != null)
        {
            target.setStatus(source.getStatus());
        }
        if (copyIfNull || source.getFromDate() != null)
        {
            target.setFromDate(source.getFromDate());
        }
        if (copyIfNull || source.getToDate() != null)
        {
            target.setToDate(source.getToDate());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#search(int, int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.user.UserLocationImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new com.jrsystems.jrbase.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#search(int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#search(int, com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final int transform, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.user.UserLocationImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.user.UserLocationDao#search(com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}