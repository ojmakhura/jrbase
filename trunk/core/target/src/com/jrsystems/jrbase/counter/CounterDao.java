// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringDao.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.counter;

/**
 * @see com.jrsystems.jrbase.counter.Counter
 */
public interface CounterDao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    public final static int TRANSFORM_NONE = 0;


    /**
     * Transforms the given results to a collection of {@link com.lighthousepmg.plz.domain.messaging.persistence.CommunicationCategory}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param the query results.
     */
    public void toEntities(final java.util.Collection results);

    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link com.jrsystems.jrbase.counter.vo.CounterVO}.
     */
    public final static int TRANSFORM_COUNTERVO = 1;

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * toCounterVO(), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     */
    public void toCounterVO(
        com.jrsystems.jrbase.counter.Counter source,
        com.jrsystems.jrbase.counter.vo.CounterVO target);


    /**
     * Converts this DAO's entity to an object of type {@link com.jrsystems.jrbase.counter.vo.CounterVO}.
     */
    public com.jrsystems.jrbase.counter.vo.CounterVO toCounterVO(com.jrsystems.jrbase.counter.Counter entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link com.jrsystems.jrbase.counter.vo.CounterVO}.
     */
    public void toCounterVOCollection(java.util.Collection entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link com.jrsystems.jrbase.counter.vo.CounterVO}.
     */
    public com.jrsystems.jrbase.counter.vo.CounterVO[] toCounterVOArray(java.util.Collection entities);

    /**
     * Copies the fields of {@link com.jrsystems.jrbase.counter.vo.CounterVO} to the specified entity.
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    public void counterVOToEntity(
        com.jrsystems.jrbase.counter.vo.CounterVO source,
        com.jrsystems.jrbase.counter.Counter target,
        boolean copyIfNull);

    /**
     * Converts an instance of type {@link com.jrsystems.jrbase.counter.vo.CounterVO} to this DAO's entity.
     */
    public com.jrsystems.jrbase.counter.Counter counterVOToEntity(com.jrsystems.jrbase.counter.vo.CounterVO counterVO);

    /**
     * Converts a Collection of instances of type {@link com.jrsystems.jrbase.counter.vo.CounterVO} to this
     * DAO's entity.
     */
    public void counterVOToEntityCollection(java.util.Collection instances);

    /**
     * Loads an instance of com.jrsystems.jrbase.counter.Counter from the persistent store.
     */
    public com.jrsystems.jrbase.counter.Counter load(java.lang.Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(java.lang.Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    public Object load(int transform, java.lang.Long id);

    /**
     * Loads all entities of type {@link com.jrsystems.jrbase.counter.Counter}.
     *
     * @return the loaded entities.
     */
    public java.util.Collection loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of com.jrsystems.jrbase.counter.Counter and adds it to the persistent store.
     */
    public com.jrsystems.jrbase.counter.Counter create(com.jrsystems.jrbase.counter.Counter counter);

    /**
     * <p>
     * Does the same thing as {@link #create(com.jrsystems.jrbase.counter.Counter)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(int transform, com.jrsystems.jrbase.counter.Counter counter);

    /**
     * Creates a new instance of com.jrsystems.jrbase.counter.Counter and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of com.jrsystems.jrbase.counter.Counter
     * instances to create.
     *
     * @return the created instances.
     */
    public java.util.Collection create(java.util.Collection entities);

    /**
     * <p>
     * Does the same thing as {@link #create(com.jrsystems.jrbase.counter.Counter)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.Collection create(int transform, java.util.Collection entities);

    /**
     * <p>
     * Creates a new <code>com.jrsystems.jrbase.counter.Counter</code>
     * instance from <strong>all</strong> attributes and adds it to
     * the persistent store.
     * </p>
     */
    public com.jrsystems.jrbase.counter.Counter create(
        java.lang.String counterName,
        java.lang.String format,
        java.lang.Long currentCount);

    /**
     * <p>
     * Does the same thing as {@link #create(java.lang.String, java.lang.String, java.lang.Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     */
    public Object create(
        int transform,
        java.lang.String counterName,
        java.lang.String format,
        java.lang.Long currentCount);


    /**
     * Updates the <code>counter</code> instance in the persistent store.
     */
    public void update(com.jrsystems.jrbase.counter.Counter counter);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     */
    public void update(java.util.Collection entities);

    /**
     * Removes the instance of com.jrsystems.jrbase.counter.Counter from the persistent store.
     */
    public void remove(com.jrsystems.jrbase.counter.Counter counter);

    /**
     * Removes the instance of com.jrsystems.jrbase.counter.Counter having the given
     * <code>identifier</code> from the persistent store.
     */
    public void remove(java.lang.Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     */
    public void remove(java.util.Collection entities);

    /**
     * 
     */
    public java.util.List getCounter(java.lang.String cunterName);

    /**
     * <p>
     * Does the same thing as {@link #getCounter(java.lang.String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #getCounter(java.lang.String)}.
     * </p>
     */
    public java.util.List getCounter(String queryString, java.lang.String cunterName);

    /**
     * <p>
     * Does the same thing as {@link #getCounter(java.lang.String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List getCounter(int pageNumber, int pageSize, java.lang.String cunterName);

    /**
     * <p>
     * Does the same thing as {@link #getCounter(String, java.lang.String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List getCounter(String queryString, int pageNumber, int pageSize, java.lang.String cunterName);

    /**
     * <p>
     * Does the same thing as {@link #getCounter(java.lang.String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then finder results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     */
    public java.util.List getCounter(int transform, java.lang.String cunterName);

    /**
     * <p>
     * Does the same thing as {@link #getCounter(int, java.lang.String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List getCounter(int transform, int pageNumber, int pageSize, java.lang.String cunterName);

    /**
     * <p>
     * Does the same thing as {@link #getCounter(int, java.lang.String)} with an
     * additional argument called <code>queryString</code>. This <code>queryString</code>
     * argument allows you to override the query string defined in {@link #getCounter(int, java.lang.String cunterName)}.
     * </p>
     */
    public java.util.List getCounter(int transform, String queryString, java.lang.String cunterName);

    /**
     * <p>
     * Does the same thing as {@link #getCounter(int, String, java.lang.String)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     */
    public java.util.List getCounter(int transform, String queryString, int pageNumber, int pageSize, java.lang.String cunterName);


    /**
     * Does the same thing as {@link #search(int, com.jrsystems.jrbase.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link com.jrsystems.jrbase.PaginationResult} instance.
     */
    public com.jrsystems.jrbase.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search);

    /**
     * Does the same thing as {@link #search(com.jrsystems.jrbase.Search) but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link com.jrsystems.jrbase.PaginationResult} instance.
     */
    public com.jrsystems.jrbase.PaginationResult search(final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search);

    /**
     * Does the same thing as {@link #search(com.jrsystems.jrbase.Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final int transform, final com.jrsystems.jrbase.Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    public java.util.Set search(final com.jrsystems.jrbase.Search search);

    // spring-dao merge-point
}