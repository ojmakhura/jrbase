// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.counter.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.counter.service.CounterService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.counter.service.CounterService
 */
public abstract class CounterServiceBase
    implements com.jrsystems.jrbase.counter.service.CounterService
{

    private com.jrsystems.jrbase.counter.CounterDao counterDao;

    /**
     * Sets the reference to <code>counter</code>'s DAO.
     */
    public void setCounterDao(com.jrsystems.jrbase.counter.CounterDao counterDao)
    {
        this.counterDao = counterDao;
    }

    /**
     * Gets the reference to <code>counter</code>'s DAO.
     */
    protected com.jrsystems.jrbase.counter.CounterDao getCounterDao()
    {
        return this.counterDao;
    }

    /**
     * @see com.jrsystems.jrbase.counter.service.CounterService#createCounter(com.jrsystems.jrbase.counter.vo.CounterVO)
     */
    public com.jrsystems.jrbase.counter.vo.CounterVO createCounter(final com.jrsystems.jrbase.counter.vo.CounterVO counterVO)
    {
        if (counterVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.createCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO' can not be null");
        }
        if (counterVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.createCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.id' can not be null");
        }
        if (counterVO.getFormat() == null || counterVO.getFormat().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.createCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.format' can not be null or empty");
        }
        if (counterVO.getCurrentCount() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.createCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.currentCount' can not be null");
        }
        if (counterVO.getCounterName() == null || counterVO.getCounterName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.createCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.counterName' can not be null or empty");
        }
        try
        {
            return this.handleCreateCounter(counterVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.counter.service.CounterServiceException(
                "Error performing 'com.jrsystems.jrbase.counter.service.CounterService.createCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #createCounter(com.jrsystems.jrbase.counter.vo.CounterVO)}
      */
    protected abstract com.jrsystems.jrbase.counter.vo.CounterVO handleCreateCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.counter.service.CounterService#getCount(java.lang.String)
     */
    public String getCount(final java.lang.String counterName)
    {
        if (counterName == null || counterName.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.getCount(java.lang.String counterName) - 'counterName' can not be null or empty");
        }
        try
        {
            return this.handleGetCount(counterName);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.counter.service.CounterServiceException(
                "Error performing 'com.jrsystems.jrbase.counter.service.CounterService.getCount(java.lang.String counterName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getCount(java.lang.String)}
      */
    protected abstract String handleGetCount(java.lang.String counterName)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.counter.service.CounterService#removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO)
     */
    public void removeCounter(final com.jrsystems.jrbase.counter.vo.CounterVO counterVO)
    {
        if (counterVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO' can not be null");
        }
        if (counterVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.id' can not be null");
        }
        if (counterVO.getFormat() == null || counterVO.getFormat().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.format' can not be null or empty");
        }
        if (counterVO.getCurrentCount() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.currentCount' can not be null");
        }
        if (counterVO.getCounterName() == null || counterVO.getCounterName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.counter.service.CounterService.removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO) - 'counterVO.counterName' can not be null or empty");
        }
        try
        {
            this.handleRemoveCounter(counterVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.counter.service.CounterServiceException(
                "Error performing 'com.jrsystems.jrbase.counter.service.CounterService.removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeCounter(com.jrsystems.jrbase.counter.vo.CounterVO)}
      */
    protected abstract void handleRemoveCounter(com.jrsystems.jrbase.counter.vo.CounterVO counterVO)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}