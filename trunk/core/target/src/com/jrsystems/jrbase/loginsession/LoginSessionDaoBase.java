// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.loginsession;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.jrsystems.jrbase.loginsession.LoginSession</code>.
 * </p>
 *
 * @see com.jrsystems.jrbase.loginsession.LoginSession
 */
public abstract class LoginSessionDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements com.jrsystems.jrbase.loginsession.LoginSessionDao
{

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>userDao</code>.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>userDao</code>.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    private com.jrsystems.jrbase.location.LocationDao locationDao;

    /**
     * Sets the reference to <code>locationDao</code>.
     */
    public void setLocationDao(com.jrsystems.jrbase.location.LocationDao locationDao)
    {
        this.locationDao = locationDao;
    }

    /**
     * Gets the reference to <code>locationDao</code>.
     */
    protected com.jrsystems.jrbase.location.LocationDao getLocationDao()
    {
        return this.locationDao;
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(com.jrsystems.jrbase.loginsession.LoginSessionImpl.class, id);
        return transformEntity(transform, (com.jrsystems.jrbase.loginsession.LoginSession)entity);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#load(java.lang.Long)
     */
    public com.jrsystems.jrbase.loginsession.LoginSession load(java.lang.Long id)
    {
        return (com.jrsystems.jrbase.loginsession.LoginSession)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(com.jrsystems.jrbase.loginsession.LoginSessionImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(com.jrsystems.jrbase.loginsession.LoginSession)
     */
    public com.jrsystems.jrbase.loginsession.LoginSession create(com.jrsystems.jrbase.loginsession.LoginSession loginSession)
    {
        return (com.jrsystems.jrbase.loginsession.LoginSession)this.create(TRANSFORM_NONE, loginSession);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(int transform, com.jrsystems.jrbase.loginsession.LoginSession)
     */
    public java.lang.Object create(final int transform, final com.jrsystems.jrbase.loginsession.LoginSession loginSession)
    {
        if (loginSession == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.create - 'loginSession' can not be null");
        }
        this.getHibernateTemplate().save(loginSession);
        return this.transformEntity(transform, loginSession);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (com.jrsystems.jrbase.loginsession.LoginSession)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(boolean)
     */
    public com.jrsystems.jrbase.loginsession.LoginSession create(
        boolean active)
    {
        return (com.jrsystems.jrbase.loginsession.LoginSession)this.create(TRANSFORM_NONE, active);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(int, boolean)
     */
    public java.lang.Object create(
        final int transform,
        boolean active)
    {
        com.jrsystems.jrbase.loginsession.LoginSession entity = new com.jrsystems.jrbase.loginsession.LoginSessionImpl();
        entity.setActive(active);
        return this.create(transform, entity);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(boolean, com.jrsystems.jrbase.location.Location, com.jrsystems.jrbase.user.User)
     */
    public com.jrsystems.jrbase.loginsession.LoginSession create(
        boolean active,
        com.jrsystems.jrbase.location.Location area,
        com.jrsystems.jrbase.user.User user)
    {
        return (com.jrsystems.jrbase.loginsession.LoginSession)this.create(TRANSFORM_NONE, active, area, user);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#create(int, boolean, com.jrsystems.jrbase.location.Location, com.jrsystems.jrbase.user.User)
     */
    public java.lang.Object create(
        final int transform,
        boolean active,
        com.jrsystems.jrbase.location.Location area,
        com.jrsystems.jrbase.user.User user)
    {
        com.jrsystems.jrbase.loginsession.LoginSession entity = new com.jrsystems.jrbase.loginsession.LoginSessionImpl();
        entity.setActive(active);
        entity.setArea(area);
        entity.setUser(user);
        return this.create(transform, entity);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#update(com.jrsystems.jrbase.loginsession.LoginSession)
     */
    public void update(com.jrsystems.jrbase.loginsession.LoginSession loginSession)
    {
        if (loginSession == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.update - 'loginSession' can not be null");
        }
        this.getHibernateTemplate().update(loginSession);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((com.jrsystems.jrbase.loginsession.LoginSession)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#remove(com.jrsystems.jrbase.loginsession.LoginSession)
     */
    public void remove(com.jrsystems.jrbase.loginsession.LoginSession loginSession)
    {
        if (loginSession == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.remove - 'loginSession' can not be null");
        }
        this.getHibernateTemplate().delete(loginSession);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.remove - 'id' can not be null");
        }
        com.jrsystems.jrbase.loginsession.LoginSession entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "LoginSession.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#findByCriteria(com.jrsystems.jrbase.loginsession.vo.LoginSearchCriteria)
     */
    public java.util.List findByCriteria(final com.jrsystems.jrbase.loginsession.vo.LoginSearchCriteria searchCriteria)
    {
        if (searchCriteria == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.loginsession.LoginSessionDao.findByCriteria(com.jrsystems.jrbase.loginsession.vo.LoginSearchCriteria searchCriteria) - 'searchCriteria' can not be null");
        }
        try
        {
            return this.handleFindByCriteria(searchCriteria);
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'com.jrsystems.jrbase.loginsession.LoginSessionDao.findByCriteria(com.jrsystems.jrbase.loginsession.vo.LoginSearchCriteria searchCriteria)' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #findByCriteria(com.jrsystems.jrbase.loginsession.vo.LoginSearchCriteria)}
      */
    protected abstract java.util.List handleFindByCriteria(com.jrsystems.jrbase.loginsession.vo.LoginSearchCriteria searchCriteria)
        throws java.lang.Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>com.jrsystems.jrbase.loginsession.LoginSessionDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link com.jrsystems.jrbase.loginsession.LoginSession} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link com.jrsystems.jrbase.loginsession.vo.LoginSessionVO} - {@link TRANSFORM_LOGINSESSIONVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link com.jrsystems.jrbase.loginsession.LoginSessionDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final com.jrsystems.jrbase.loginsession.LoginSession entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_LOGINSESSIONVO :
                    target = toLoginSessionVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,com.jrsystems.jrbase.loginsession.LoginSession)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>com.jrsystems.jrbase.loginsession.LoginSessionDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,com.jrsystems.jrbase.loginsession.LoginSession)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_LOGINSESSIONVO :
                toLoginSessionVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link com.jrsystems.jrbase.loginsession.LoginSession}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof com.jrsystems.jrbase.loginsession.LoginSession)
                {
                    result = input;
                }
                return result;
            }
        };

    protected com.jrsystems.jrbase.loginsession.LoginSession toEntity(java.lang.Object[] row)
    {
        com.jrsystems.jrbase.loginsession.LoginSession target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof com.jrsystems.jrbase.loginsession.LoginSession)
                {
                    target = (com.jrsystems.jrbase.loginsession.LoginSession)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#toLoginSessionVOCollection(java.util.Collection)
     */
    public final void toLoginSessionVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, LOGINSESSIONVO_TRANSFORMER);
        }
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#toLoginSessionVOArray(java.util.Collection)
     */
    public final com.jrsystems.jrbase.loginsession.vo.LoginSessionVO[] toLoginSessionVOArray(java.util.Collection entities)
    {
        com.jrsystems.jrbase.loginsession.vo.LoginSessionVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toLoginSessionVOCollection(collection);
            result = (com.jrsystems.jrbase.loginsession.vo.LoginSessionVO[]) collection.toArray(new com.jrsystems.jrbase.loginsession.vo.LoginSessionVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link LoginSessionDaoImpl} class if you intend to use reporting queries.
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#toLoginSessionVO(com.jrsystems.jrbase.loginsession.LoginSession)
     */
    protected com.jrsystems.jrbase.loginsession.vo.LoginSessionVO toLoginSessionVO(java.lang.Object[] row)
    {
        return this.toLoginSessionVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link com.jrsystems.jrbase.loginsession.vo.LoginSessionVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer LOGINSESSIONVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof com.jrsystems.jrbase.loginsession.LoginSession)
                {
                    result = toLoginSessionVO((com.jrsystems.jrbase.loginsession.LoginSession)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toLoginSessionVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#loginSessionVOToEntityCollection(java.util.Collection)
     */
    public final void loginSessionVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof com.jrsystems.jrbase.loginsession.vo.LoginSessionVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, LoginSessionVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer LoginSessionVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return loginSessionVOToEntity((com.jrsystems.jrbase.loginsession.vo.LoginSessionVO)input);
            }
        };


    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#toLoginSessionVO(com.jrsystems.jrbase.loginsession.LoginSession, com.jrsystems.jrbase.loginsession.vo.LoginSessionVO)
     */
    public void toLoginSessionVO(
        com.jrsystems.jrbase.loginsession.LoginSession source,
        com.jrsystems.jrbase.loginsession.vo.LoginSessionVO target)
    {
        target.setId(source.getId());
        // No conversion for target.user (can't convert source.getUser():com.jrsystems.jrbase.user.User to com.jrsystems.jrbase.user.vo.UserVO)
        // No conversion for target.area (can't convert source.getArea():com.jrsystems.jrbase.location.Location to com.jrsystems.jrbase.location.vo.LocationVO)
        target.setActive(source.isActive());
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#toLoginSessionVO(com.jrsystems.jrbase.loginsession.LoginSession)
     */
    public com.jrsystems.jrbase.loginsession.vo.LoginSessionVO toLoginSessionVO(final com.jrsystems.jrbase.loginsession.LoginSession entity)
    {
        com.jrsystems.jrbase.loginsession.vo.LoginSessionVO target = null;
        if (entity != null)
        {
            target = new com.jrsystems.jrbase.loginsession.vo.LoginSessionVO();
            this.toLoginSessionVO(entity, target);
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#loginSessionVOToEntity(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO, com.jrsystems.jrbase.loginsession.LoginSession)
     */
    public void loginSessionVOToEntity(
        com.jrsystems.jrbase.loginsession.vo.LoginSessionVO source,
        com.jrsystems.jrbase.loginsession.LoginSession target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.isActive() != false)
        {
            target.setActive(source.isActive());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#search(int, int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.loginsession.LoginSessionImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new com.jrsystems.jrbase.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#search(int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#search(int, com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final int transform, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.loginsession.LoginSessionImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.LoginSessionDao#search(com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}