// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.loginsession.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.loginsession.service.LoginSessionService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.loginsession.service.LoginSessionService
 */
public abstract class LoginSessionServiceBase
    implements com.jrsystems.jrbase.loginsession.service.LoginSessionService
{

    private com.jrsystems.jrbase.loginsession.LoginSessionDao loginSessionDao;

    /**
     * Sets the reference to <code>loginSession</code>'s DAO.
     */
    public void setLoginSessionDao(com.jrsystems.jrbase.loginsession.LoginSessionDao loginSessionDao)
    {
        this.loginSessionDao = loginSessionDao;
    }

    /**
     * Gets the reference to <code>loginSession</code>'s DAO.
     */
    protected com.jrsystems.jrbase.loginsession.LoginSessionDao getLoginSessionDao()
    {
        return this.loginSessionDao;
    }

    private com.jrsystems.jrbase.location.LocationDao locationDao;

    /**
     * Sets the reference to <code>location</code>'s DAO.
     */
    public void setLocationDao(com.jrsystems.jrbase.location.LocationDao locationDao)
    {
        this.locationDao = locationDao;
    }

    /**
     * Gets the reference to <code>location</code>'s DAO.
     */
    protected com.jrsystems.jrbase.location.LocationDao getLocationDao()
    {
        return this.locationDao;
    }

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>user</code>'s DAO.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>user</code>'s DAO.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    /**
     * @see com.jrsystems.jrbase.loginsession.service.LoginSessionService#saveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO)
     */
    public com.jrsystems.jrbase.loginsession.vo.LoginSessionVO saveLoginSession(final com.jrsystems.jrbase.loginsession.vo.LoginSessionVO loginSessionVO)
    {
        if (loginSessionVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.loginsession.service.LoginSessionService.saveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO loginSessionVO) - 'loginSessionVO' can not be null");
        }
        if (loginSessionVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.loginsession.service.LoginSessionService.saveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO loginSessionVO) - 'loginSessionVO.id' can not be null");
        }
        if (loginSessionVO.getUser() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.loginsession.service.LoginSessionService.saveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO loginSessionVO) - 'loginSessionVO.user' can not be null");
        }
        if (loginSessionVO.getArea() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.loginsession.service.LoginSessionService.saveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO loginSessionVO) - 'loginSessionVO.area' can not be null");
        }
        try
        {
            return this.handleSaveLoginSession(loginSessionVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.loginsession.service.LoginSessionServiceException(
                "Error performing 'com.jrsystems.jrbase.loginsession.service.LoginSessionService.saveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO loginSessionVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO)}
      */
    protected abstract com.jrsystems.jrbase.loginsession.vo.LoginSessionVO handleSaveLoginSession(com.jrsystems.jrbase.loginsession.vo.LoginSessionVO loginSessionVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.loginsession.service.LoginSessionService#getAllLoginSessions()
     */
    public java.util.List getAllLoginSessions()
    {
        try
        {
            return this.handleGetAllLoginSessions();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.loginsession.service.LoginSessionServiceException(
                "Error performing 'com.jrsystems.jrbase.loginsession.service.LoginSessionService.getAllLoginSessions()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllLoginSessions()}
      */
    protected abstract java.util.List handleGetAllLoginSessions()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.loginsession.service.LoginSessionService#verifyLoginDetails(java.lang.String, java.lang.String)
     */
    public com.jrsystems.jrbase.loginsession.vo.LoginSessionVO verifyLoginDetails(final java.lang.String username, final java.lang.String password)
    {
        if (username == null || username.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.loginsession.service.LoginSessionService.verifyLoginDetails(java.lang.String username, java.lang.String password) - 'username' can not be null or empty");
        }
        if (password == null || password.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.loginsession.service.LoginSessionService.verifyLoginDetails(java.lang.String username, java.lang.String password) - 'password' can not be null or empty");
        }
        try
        {
            return this.handleVerifyLoginDetails(username, password);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.loginsession.service.LoginSessionServiceException(
                "Error performing 'com.jrsystems.jrbase.loginsession.service.LoginSessionService.verifyLoginDetails(java.lang.String username, java.lang.String password)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #verifyLoginDetails(java.lang.String, java.lang.String)}
      */
    protected abstract com.jrsystems.jrbase.loginsession.vo.LoginSessionVO handleVerifyLoginDetails(java.lang.String username, java.lang.String password)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}