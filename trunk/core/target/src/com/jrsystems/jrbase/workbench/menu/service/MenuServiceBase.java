// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.workbench.menu.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.workbench.menu.service.MenuService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.workbench.menu.service.MenuService
 */
public abstract class MenuServiceBase
    implements com.jrsystems.jrbase.workbench.menu.service.MenuService
{

    private com.jrsystems.jrbase.workbench.menu.MenuDao menuDao;

    /**
     * Sets the reference to <code>menu</code>'s DAO.
     */
    public void setMenuDao(com.jrsystems.jrbase.workbench.menu.MenuDao menuDao)
    {
        this.menuDao = menuDao;
    }

    /**
     * Gets the reference to <code>menu</code>'s DAO.
     */
    protected com.jrsystems.jrbase.workbench.menu.MenuDao getMenuDao()
    {
        return this.menuDao;
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.service.MenuService#getAllMenus()
     */
    public java.util.List getAllMenus()
    {
        try
        {
            return this.handleGetAllMenus();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.menu.service.MenuServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.menu.service.MenuService.getAllMenus()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllMenus()}
      */
    protected abstract java.util.List handleGetAllMenus()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.workbench.menu.service.MenuService#getMenuBycode(java.lang.String)
     */
    public java.util.List getMenuBycode(final java.lang.String code)
    {
        if (code == null || code.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.getMenuBycode(java.lang.String code) - 'code' can not be null or empty");
        }
        try
        {
            return this.handleGetMenuBycode(code);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.menu.service.MenuServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.menu.service.MenuService.getMenuBycode(java.lang.String code)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getMenuBycode(java.lang.String)}
      */
    protected abstract java.util.List handleGetMenuBycode(java.lang.String code)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.workbench.menu.service.MenuService#getMenuByName(java.lang.String)
     */
    public java.util.List getMenuByName(final java.lang.String name)
    {
        if (name == null || name.trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.getMenuByName(java.lang.String name) - 'name' can not be null or empty");
        }
        try
        {
            return this.handleGetMenuByName(name);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.menu.service.MenuServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.menu.service.MenuService.getMenuByName(java.lang.String name)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getMenuByName(java.lang.String)}
      */
    protected abstract java.util.List handleGetMenuByName(java.lang.String name)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.workbench.menu.service.MenuService#saveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO)
     */
    public com.jrsystems.jrbase.workbench.menu.vo.MenuVO saveMenu(final com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO)
    {
        if (menuVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.saveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO' can not be null");
        }
        if (menuVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.saveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO.id' can not be null");
        }
        if (menuVO.getMenuCode() == null || menuVO.getMenuCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.saveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO.menuCode' can not be null or empty");
        }
        if (menuVO.getMenuName() == null || menuVO.getMenuName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.saveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO.menuName' can not be null or empty");
        }
        try
        {
            return this.handleSaveMenu(menuVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.menu.service.MenuServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.menu.service.MenuService.saveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO)}
      */
    protected abstract com.jrsystems.jrbase.workbench.menu.vo.MenuVO handleSaveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.workbench.menu.service.MenuService#removeMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO)
     */
    public void removeMenu(final com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO)
    {
        if (menuVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.removeMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO' can not be null");
        }
        if (menuVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.removeMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO.id' can not be null");
        }
        if (menuVO.getMenuCode() == null || menuVO.getMenuCode().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.removeMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO.menuCode' can not be null or empty");
        }
        if (menuVO.getMenuName() == null || menuVO.getMenuName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.service.MenuService.removeMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO) - 'menuVO.menuName' can not be null or empty");
        }
        try
        {
            this.handleRemoveMenu(menuVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.menu.service.MenuServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.menu.service.MenuService.removeMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO)}
      */
    protected abstract void handleRemoveMenu(com.jrsystems.jrbase.workbench.menu.vo.MenuVO menuVO)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}