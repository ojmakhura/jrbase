// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.workbench.program.service;

/**
 * <p>
 * Spring Service base class for <code>com.jrsystems.jrbase.workbench.program.service.ProgramService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.jrsystems.jrbase.workbench.program.service.ProgramService
 */
public abstract class ProgramServiceBase
    implements com.jrsystems.jrbase.workbench.program.service.ProgramService
{

    private com.jrsystems.jrbase.workbench.program.ProgramDao programDao;

    /**
     * Sets the reference to <code>program</code>'s DAO.
     */
    public void setProgramDao(com.jrsystems.jrbase.workbench.program.ProgramDao programDao)
    {
        this.programDao = programDao;
    }

    /**
     * Gets the reference to <code>program</code>'s DAO.
     */
    protected com.jrsystems.jrbase.workbench.program.ProgramDao getProgramDao()
    {
        return this.programDao;
    }

    /**
     * @see com.jrsystems.jrbase.workbench.program.service.ProgramService#getAllPrograms()
     */
    public java.util.List getAllPrograms()
    {
        try
        {
            return this.handleGetAllPrograms();
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.program.service.ProgramServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.program.service.ProgramService.getAllPrograms()' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #getAllPrograms()}
      */
    protected abstract java.util.List handleGetAllPrograms()
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.workbench.program.service.ProgramService#saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO)
     */
    public com.jrsystems.jrbase.workbench.program.vo.ProgramVO saveProgram(final com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO)
    {
        if (programVO == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO) - 'programVO' can not be null");
        }
        if (programVO.getProgramId() == null || programVO.getProgramId().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO) - 'programVO.programId' can not be null or empty");
        }
        if (programVO.getProgramName() == null || programVO.getProgramName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO) - 'programVO.programName' can not be null or empty");
        }
        if (programVO.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO) - 'programVO.id' can not be null");
        }
        if (programVO.getMenu() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO) - 'programVO.menu' can not be null");
        }
        try
        {
            return this.handleSaveProgram(programVO);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.program.service.ProgramServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.program.service.ProgramService.saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #saveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO)}
      */
    protected abstract com.jrsystems.jrbase.workbench.program.vo.ProgramVO handleSaveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVO)
        throws java.lang.Exception;

    /**
     * @see com.jrsystems.jrbase.workbench.program.service.ProgramService#removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO)
     */
    public void removeProgram(final com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo)
    {
        if (programVo == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo) - 'programVo' can not be null");
        }
        if (programVo.getProgramId() == null || programVo.getProgramId().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo) - 'programVo.programId' can not be null or empty");
        }
        if (programVo.getProgramName() == null || programVo.getProgramName().trim().length() == 0)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo) - 'programVo.programName' can not be null or empty");
        }
        if (programVo.getId() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo) - 'programVo.id' can not be null");
        }
        if (programVo.getMenu() == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.program.service.ProgramService.removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo) - 'programVo.menu' can not be null");
        }
        try
        {
            this.handleRemoveProgram(programVo);
        }
        catch (Throwable th)
        {
            throw new com.jrsystems.jrbase.workbench.program.service.ProgramServiceException(
                "Error performing 'com.jrsystems.jrbase.workbench.program.service.ProgramService.removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #removeProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO)}
      */
    protected abstract void handleRemoveProgram(com.jrsystems.jrbase.workbench.program.vo.ProgramVO programVo)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * Gets the message source available to this service.
     */
    protected org.springframework.context.MessageSource getMessages()
    {
        return (org.springframework.context.MessageSource)
            com.jrsystems.jrbase.BeanLocator.instance().getBean("messageSource");
    }

    /**
     * Gets the message having the given <code>key</code> in the underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     */
    protected String getMessage(final String key)
    {
        return this.getMessages().getMessage(key, null, null);
    }

    /**
     * Gets the message having the given <code>key</code> and <code>arguments</code> in the
     * underlying message bundle.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     */
    protected String getMessage(final String key, final Object[] arguments)
    {
        return this.getMessages().getMessage(key, arguments, null);
    }

    /**
     * Gets the message having the given <code>key</code> using the given <code>arguments</code>
     * for the given <code>locale</code>.
     *
     * @param key the key of the message in the messages.properties message bundle.
     * @param arguments any arguments to substitute when resolving the message.
     * @param locale the locale of the messages to retrieve.
     */
    protected String getMessage(
        final java.lang.String key, final java.lang.Object[] arguments,
        final java.util.Locale locale)
    {
        return this.getMessages().getMessage(key, arguments, locale);
    }

}