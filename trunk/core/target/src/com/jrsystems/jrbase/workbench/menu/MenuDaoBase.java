// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringHibernateDaoBase.vsl in andromda-spring-cartridge.
//
package com.jrsystems.jrbase.workbench.menu;

/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>com.jrsystems.jrbase.workbench.menu.Menu</code>.
 * </p>
 *
 * @see com.jrsystems.jrbase.workbench.menu.Menu
 */
public abstract class MenuDaoBase
    extends org.springframework.orm.hibernate3.support.HibernateDaoSupport
    implements com.jrsystems.jrbase.workbench.menu.MenuDao
{

    private com.jrsystems.jrbase.workbench.program.ProgramDao programDao;

    /**
     * Sets the reference to <code>programDao</code>.
     */
    public void setProgramDao(com.jrsystems.jrbase.workbench.program.ProgramDao programDao)
    {
        this.programDao = programDao;
    }

    /**
     * Gets the reference to <code>programDao</code>.
     */
    protected com.jrsystems.jrbase.workbench.program.ProgramDao getProgramDao()
    {
        return this.programDao;
    }

    private com.jrsystems.jrbase.user.UserDao userDao;

    /**
     * Sets the reference to <code>userDao</code>.
     */
    public void setUserDao(com.jrsystems.jrbase.user.UserDao userDao)
    {
        this.userDao = userDao;
    }

    /**
     * Gets the reference to <code>userDao</code>.
     */
    protected com.jrsystems.jrbase.user.UserDao getUserDao()
    {
        return this.userDao;
    }

    private com.jrsystems.jrbase.role.RoleDao roleDao;

    /**
     * Sets the reference to <code>roleDao</code>.
     */
    public void setRoleDao(com.jrsystems.jrbase.role.RoleDao roleDao)
    {
        this.roleDao = roleDao;
    }

    /**
     * Gets the reference to <code>roleDao</code>.
     */
    protected com.jrsystems.jrbase.role.RoleDao getRoleDao()
    {
        return this.roleDao;
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#load(int, java.lang.Long)
     */
    public java.lang.Object load(final int transform, final java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Menu.load - 'id' can not be null");
        }
        final java.lang.Object entity = this.getHibernateTemplate().get(com.jrsystems.jrbase.workbench.menu.MenuImpl.class, id);
        return transformEntity(transform, (com.jrsystems.jrbase.workbench.menu.Menu)entity);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#load(java.lang.Long)
     */
    public com.jrsystems.jrbase.workbench.menu.Menu load(java.lang.Long id)
    {
        return (com.jrsystems.jrbase.workbench.menu.Menu)this.load(TRANSFORM_NONE, id);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#loadAll()
     */
    public java.util.Collection loadAll()
    {
        return this.loadAll(TRANSFORM_NONE);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#loadAll(int)
     */
    public java.util.Collection loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#loadAll(int, int)
     */
    public java.util.Collection loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll(TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#loadAll(int, int, int)
     */
    public java.util.Collection loadAll(final int transform, final int pageNumber, final int pageSize)
    {
        try
        {
            final org.hibernate.Criteria criteria = this.getSession(false).createCriteria(com.jrsystems.jrbase.workbench.menu.MenuImpl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final java.util.Collection results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    protected int calculateFirstResult(int pageNumber, int pageSize)
    {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#create(com.jrsystems.jrbase.workbench.menu.Menu)
     */
    public com.jrsystems.jrbase.workbench.menu.Menu create(com.jrsystems.jrbase.workbench.menu.Menu menu)
    {
        return (com.jrsystems.jrbase.workbench.menu.Menu)this.create(TRANSFORM_NONE, menu);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#create(int transform, com.jrsystems.jrbase.workbench.menu.Menu)
     */
    public java.lang.Object create(final int transform, final com.jrsystems.jrbase.workbench.menu.Menu menu)
    {
        if (menu == null)
        {
            throw new IllegalArgumentException(
                "Menu.create - 'menu' can not be null");
        }
        this.getHibernateTemplate().save(menu);
        return this.transformEntity(transform, menu);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#create(java.util.Collection)
     */
    public java.util.Collection create(final java.util.Collection entities)
    {
        return create(TRANSFORM_NONE, entities);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#create(int, java.util.Collection)
     */
    public java.util.Collection create(final int transform, final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Menu.create - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        create(transform, (com.jrsystems.jrbase.workbench.menu.Menu)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
        return entities;
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#create(java.lang.String, java.lang.String, java.lang.String)
     */
    public com.jrsystems.jrbase.workbench.menu.Menu create(
        java.lang.String menuCode,
        java.lang.String menuName,
        java.lang.String menuDescription)
    {
        return (com.jrsystems.jrbase.workbench.menu.Menu)this.create(TRANSFORM_NONE, menuCode, menuName, menuDescription);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#create(int, java.lang.String, java.lang.String, java.lang.String)
     */
    public java.lang.Object create(
        final int transform,
        java.lang.String menuCode,
        java.lang.String menuName,
        java.lang.String menuDescription)
    {
        com.jrsystems.jrbase.workbench.menu.Menu entity = new com.jrsystems.jrbase.workbench.menu.MenuImpl();
        entity.setMenuCode(menuCode);
        entity.setMenuName(menuName);
        entity.setMenuDescription(menuDescription);
        return this.create(transform, entity);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#update(com.jrsystems.jrbase.workbench.menu.Menu)
     */
    public void update(com.jrsystems.jrbase.workbench.menu.Menu menu)
    {
        if (menu == null)
        {
            throw new IllegalArgumentException(
                "Menu.update - 'menu' can not be null");
        }
        this.getHibernateTemplate().update(menu);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#update(java.util.Collection)
     */
    public void update(final java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Menu.update - 'entities' can not be null");
        }
        this.getHibernateTemplate().execute(
            new org.springframework.orm.hibernate3.HibernateCallback()
            {
                public java.lang.Object doInHibernate(org.hibernate.Session session)
                    throws org.hibernate.HibernateException
                {
                    for (java.util.Iterator entityIterator = entities.iterator(); entityIterator.hasNext();)
                    {
                        update((com.jrsystems.jrbase.workbench.menu.Menu)entityIterator.next());
                    }
                    return null;
                }
            },
            true);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#remove(com.jrsystems.jrbase.workbench.menu.Menu)
     */
    public void remove(com.jrsystems.jrbase.workbench.menu.Menu menu)
    {
        if (menu == null)
        {
            throw new IllegalArgumentException(
                "Menu.remove - 'menu' can not be null");
        }
        this.getHibernateTemplate().delete(menu);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#remove(java.lang.Long)
     */
    public void remove(java.lang.Long id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "Menu.remove - 'id' can not be null");
        }
        com.jrsystems.jrbase.workbench.menu.Menu entity = this.load(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#remove(java.util.Collection)
     */
    public void remove(java.util.Collection entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "Menu.remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#findByCriteria(com.jrsystems.jrbase.workbench.menu.vo.MenuSearchCriteria)
     */
    public java.util.List findByCriteria(final com.jrsystems.jrbase.workbench.menu.vo.MenuSearchCriteria criteria)
    {
        if (criteria == null)
        {
            throw new IllegalArgumentException(
                "com.jrsystems.jrbase.workbench.menu.MenuDao.findByCriteria(com.jrsystems.jrbase.workbench.menu.vo.MenuSearchCriteria criteria) - 'criteria' can not be null");
        }
        try
        {
            return this.handleFindByCriteria(criteria);
        }
        catch (Throwable th)
        {
            throw new java.lang.RuntimeException(
            "Error performing 'com.jrsystems.jrbase.workbench.menu.MenuDao.findByCriteria(com.jrsystems.jrbase.workbench.menu.vo.MenuSearchCriteria criteria)' --> " + th,
            th);
        }
    }

     /**
      * Performs the core logic for {@link #findByCriteria(com.jrsystems.jrbase.workbench.menu.vo.MenuSearchCriteria)}
      */
    protected abstract java.util.List handleFindByCriteria(com.jrsystems.jrbase.workbench.menu.vo.MenuSearchCriteria criteria)
        throws java.lang.Exception;

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>com.jrsystems.jrbase.workbench.menu.MenuDao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link com.jrsystems.jrbase.workbench.menu.Menu} - {@link #TRANSFORM_NONE}</li>
     *   <li>{@link com.jrsystems.jrbase.workbench.menu.vo.MenuVO} - {@link TRANSFORM_MENUVO}</li>
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link com.jrsystems.jrbase.workbench.menu.MenuDao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,java.util.Collection)
     */
    protected java.lang.Object transformEntity(final int transform, final com.jrsystems.jrbase.workbench.menu.Menu entity)
    {
        java.lang.Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
                case TRANSFORM_MENUVO :
                    target = toMenuVO(entity);
                    break;
                case TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,com.jrsystems.jrbase.workbench.menu.Menu)}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>com.jrsystems.jrbase.workbench.menu.MenuDao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,com.jrsystems.jrbase.workbench.menu.Menu)
     */
    protected void transformEntities(final int transform, final java.util.Collection entities)
    {
        switch (transform)
        {
            case TRANSFORM_MENUVO :
                toMenuVOCollection(entities);
                break;
            case TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#toEntities(java.util.Collection)
     */
    public void toEntities(final java.util.Collection results)
    {
        if (results != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(results, ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link com.jrsystems.jrbase.workbench.menu.Menu}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer ENTITYTRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof java.lang.Object[])
                {
                    result = toEntity((java.lang.Object[])input);
                }
                else if (input instanceof com.jrsystems.jrbase.workbench.menu.Menu)
                {
                    result = input;
                }
                return result;
            }
        };

    protected com.jrsystems.jrbase.workbench.menu.Menu toEntity(java.lang.Object[] row)
    {
        com.jrsystems.jrbase.workbench.menu.Menu target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final java.lang.Object object = row[ctr];
                if (object instanceof com.jrsystems.jrbase.workbench.menu.Menu)
                {
                    target = (com.jrsystems.jrbase.workbench.menu.Menu)object;
                    break;
                }
            }
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#toMenuVOCollection(java.util.Collection)
     */
    public final void toMenuVOCollection(java.util.Collection entities)
    {
        if (entities != null)
        {
            org.apache.commons.collections.CollectionUtils.transform(entities, MENUVO_TRANSFORMER);
        }
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#toMenuVOArray(java.util.Collection)
     */
    public final com.jrsystems.jrbase.workbench.menu.vo.MenuVO[] toMenuVOArray(java.util.Collection entities)
    {
        com.jrsystems.jrbase.workbench.menu.vo.MenuVO[] result = null;
        if (entities != null)
        {
            final java.util.Collection collection = new java.util.ArrayList(entities);
            this.toMenuVOCollection(collection);
            result = (com.jrsystems.jrbase.workbench.menu.vo.MenuVO[]) collection.toArray(new com.jrsystems.jrbase.workbench.menu.vo.MenuVO[0]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link MenuDaoImpl} class if you intend to use reporting queries.
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#toMenuVO(com.jrsystems.jrbase.workbench.menu.Menu)
     */
    protected com.jrsystems.jrbase.workbench.menu.vo.MenuVO toMenuVO(java.lang.Object[] row)
    {
        return this.toMenuVO(this.toEntity(row));
    }

    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link com.jrsystems.jrbase.workbench.menu.vo.MenuVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private org.apache.commons.collections.Transformer MENUVO_TRANSFORMER =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                java.lang.Object result = null;
                if (input instanceof com.jrsystems.jrbase.workbench.menu.Menu)
                {
                    result = toMenuVO((com.jrsystems.jrbase.workbench.menu.Menu)input);
                }
                else if (input instanceof java.lang.Object[])
                {
                    result = toMenuVO((java.lang.Object[])input);
                }
                return result;
            }
        };

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#menuVOToEntityCollection(java.util.Collection)
     */
    public final void menuVOToEntityCollection(java.util.Collection instances)
    {
        if (instances != null)
        {
            for (final java.util.Iterator iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof com.jrsystems.jrbase.workbench.menu.vo.MenuVO))
                {
                    iterator.remove();
                }
            }
            org.apache.commons.collections.CollectionUtils.transform(instances, MenuVOToEntityTransformer);
        }
    }

    private final org.apache.commons.collections.Transformer MenuVOToEntityTransformer =
        new org.apache.commons.collections.Transformer()
        {
            public java.lang.Object transform(java.lang.Object input)
            {
                return menuVOToEntity((com.jrsystems.jrbase.workbench.menu.vo.MenuVO)input);
            }
        };


    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#toMenuVO(com.jrsystems.jrbase.workbench.menu.Menu, com.jrsystems.jrbase.workbench.menu.vo.MenuVO)
     */
    public void toMenuVO(
        com.jrsystems.jrbase.workbench.menu.Menu source,
        com.jrsystems.jrbase.workbench.menu.vo.MenuVO target)
    {
        target.setId(source.getId());
        target.setMenuCode(source.getMenuCode());
        target.setMenuName(source.getMenuName());
        target.setMenuDescription(source.getMenuDescription());
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#toMenuVO(com.jrsystems.jrbase.workbench.menu.Menu)
     */
    public com.jrsystems.jrbase.workbench.menu.vo.MenuVO toMenuVO(final com.jrsystems.jrbase.workbench.menu.Menu entity)
    {
        com.jrsystems.jrbase.workbench.menu.vo.MenuVO target = null;
        if (entity != null)
        {
            target = new com.jrsystems.jrbase.workbench.menu.vo.MenuVO();
            this.toMenuVO(entity, target);
        }
        return target;
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#menuVOToEntity(com.jrsystems.jrbase.workbench.menu.vo.MenuVO, com.jrsystems.jrbase.workbench.menu.Menu)
     */
    public void menuVOToEntity(
        com.jrsystems.jrbase.workbench.menu.vo.MenuVO source,
        com.jrsystems.jrbase.workbench.menu.Menu target,
        boolean copyIfNull)
    {
        if (copyIfNull || source.getMenuCode() != null)
        {
            target.setMenuCode(source.getMenuCode());
        }
        if (copyIfNull || source.getMenuName() != null)
        {
            target.setMenuName(source.getMenuName());
        }
        if (copyIfNull || source.getMenuDescription() != null)
        {
            target.setMenuDescription(source.getMenuDescription());
        }
    }

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.jrsystems.jrbase.PrincipalStore.get();
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#search(int, int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int transform, final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.workbench.menu.MenuImpl.class, search);
            final java.util.List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new com.jrsystems.jrbase.PaginationResult(results.toArray(new java.lang.Object[0]), propertySearch.getTotalCount());
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#search(int, int, com.jrsystems.jrbase.Search)
     */
    public com.jrsystems.jrbase.PaginationResult search(final int pageNumber, final int pageSize, final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#search(int, com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final int transform, final com.jrsystems.jrbase.Search search)
    {
        try
        {
            final com.jrsystems.jrbase.PropertySearch propertySearch = new com.jrsystems.jrbase.PropertySearch(
                this.getSession(false), com.jrsystems.jrbase.workbench.menu.MenuImpl.class, search);
            final java.util.Set results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (org.hibernate.HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * @see com.jrsystems.jrbase.workbench.menu.MenuDao#search(com.jrsystems.jrbase.Search)
     */
    public java.util.Set search(final com.jrsystems.jrbase.Search search)
    {
        return this.search(TRANSFORM_NONE, search);
    }

    // spring-hibernate-dao-base merge-point
}