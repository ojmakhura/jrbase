// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.jrbase.clearancelevel;

import com.systemsjr.jrbase.clearancelevel.vo.ClearanceLevelSearchCriteria;
import com.systemsjr.jrbase.clearancelevel.vo.ClearanceLevelVO;
import java.util.List;

/**
 * @see ClearanceLevel
 */
public class ClearanceLevelDaoImpl
    extends ClearanceLevelDaoBase
{
    /**
     * {@inheritDoc}
     */
    protected List handleFindByCriteria(ClearanceLevelSearchCriteria searchCriteria)
    {
        // TODO implement public List handleFindByCriteria(ClearanceLevelSearchCriteria searchCriteria)
        return null;
}

    /**
     * {@inheritDoc}
     */
    public void toClearanceLevelVO(
        ClearanceLevel source,
        ClearanceLevelVO target)
    {
        // TODO verify behavior of toClearanceLevelVO
        super.toClearanceLevelVO(source, target);
        // WARNING! No conversion for target.lowerLevel (can't convert source.getLowerLevel():ClearanceLevel to ClearanceLevelVO
        // WARNING! No conversion for target.upperLevel (can't convert source.getUpperLevel():ClearanceLevel to ClearanceLevelVO
        // WARNING! No conversion for target.clearedUsers (can't convert source.getClearedUsers():com.systemsjr.jrbase.user.User to com.systemsjr.jrbase.user.vo.UserVO[]
        // WARNING! No conversion for target.clearedRoles (can't convert source.getClearedRoles():com.systemsjr.jrbase.role.Role to com.systemsjr.jrbase.role.vo.RoleVO[]
    }

    /**
     * {@inheritDoc}
     */
    public ClearanceLevelVO toClearanceLevelVO(final ClearanceLevel entity)
    {
        // TODO verify behavior of toClearanceLevelVO
        return super.toClearanceLevelVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private ClearanceLevel loadClearanceLevelFromClearanceLevelVO(ClearanceLevelVO clearanceLevelVO)
    {
        // TODO implement loadClearanceLevelFromClearanceLevelVO
        throw new UnsupportedOperationException("com.systemsjr.jrbase.clearancelevel.loadClearanceLevelFromClearanceLevelVO(ClearanceLevelVO) not yet implemented.");

        /* A typical implementation looks like this:
        ClearanceLevel clearanceLevel = this.get(clearanceLevelVO.getId());
        if (clearanceLevel == null)
        {
            clearanceLevel = ClearanceLevel.Factory.newInstance();
        }
        return clearanceLevel;
        */
    }

    /**
     * {@inheritDoc}
     */
    public ClearanceLevel clearanceLevelVOToEntity(ClearanceLevelVO clearanceLevelVO)
    {
        // TODO verify behavior of clearanceLevelVOToEntity
        ClearanceLevel entity = this.loadClearanceLevelFromClearanceLevelVO(clearanceLevelVO);
        this.clearanceLevelVOToEntity(clearanceLevelVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void clearanceLevelVOToEntity(
        ClearanceLevelVO source,
        ClearanceLevel target,
        boolean copyIfNull)
    {
        // TODO verify behavior of clearanceLevelVOToEntity
        super.clearanceLevelVOToEntity(source, target, copyIfNull);
    }
}