// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.jrbase.location;

import com.systemsjr.jrbase.location.vo.LocationTypeSearchCriteria;
import com.systemsjr.jrbase.location.vo.LocationTypeVO;
import java.util.List;

/**
 * @see LocationType
 */
public class LocationTypeDaoImpl
    extends LocationTypeDaoBase
{
    /**
     * {@inheritDoc}
     */
    protected List handleFindByCriteria(LocationTypeSearchCriteria searchCriteria)
    {
        // TODO implement public List handleFindByCriteria(LocationTypeSearchCriteria searchCriteria)
        return null;
}

    /**
     * {@inheritDoc}
     */
    public void toLocationTypeVO(
        LocationType source,
        LocationTypeVO target)
    {
        // TODO verify behavior of toLocationTypeVO
        super.toLocationTypeVO(source, target);
        // WARNING! No conversion for target.fallsWithinLocationType (can't convert source.getFallsWithinLocationType():LocationType to LocationTypeVO
    }

    /**
     * {@inheritDoc}
     */
    public LocationTypeVO toLocationTypeVO(final LocationType entity)
    {
        // TODO verify behavior of toLocationTypeVO
        return super.toLocationTypeVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private LocationType loadLocationTypeFromLocationTypeVO(LocationTypeVO locationTypeVO)
    {
        // TODO implement loadLocationTypeFromLocationTypeVO
        throw new UnsupportedOperationException("com.systemsjr.jrbase.location.loadLocationTypeFromLocationTypeVO(LocationTypeVO) not yet implemented.");

        /* A typical implementation looks like this:
        LocationType locationType = this.get(locationTypeVO.getId());
        if (locationType == null)
        {
            locationType = LocationType.Factory.newInstance();
        }
        return locationType;
        */
    }

    /**
     * {@inheritDoc}
     */
    public LocationType locationTypeVOToEntity(LocationTypeVO locationTypeVO)
    {
        // TODO verify behavior of locationTypeVOToEntity
        LocationType entity = this.loadLocationTypeFromLocationTypeVO(locationTypeVO);
        this.locationTypeVOToEntity(locationTypeVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void locationTypeVOToEntity(
        LocationTypeVO source,
        LocationType target,
        boolean copyIfNull)
    {
        // TODO verify behavior of locationTypeVOToEntity
        super.locationTypeVOToEntity(source, target, copyIfNull);
    }
}