// license-header java merge-point
//
/**
 * @author Generated by ServiceImpl.vsl in andromda-java-cartridge on 01/26/2019 22:36:53+0000 *
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.jrbase.location.service;

/**
 * @see com.systemsjr.jrbase.location.service.LocationTypeService
 */
public class LocationTypeServiceImpl
    implements com.systemsjr.jrbase.location.service.LocationTypeService
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = -6732107067102813378L;

    /**
     * @see com.systemsjr.jrbase.location.service.LocationTypeService#findById(java.lang.Long)
     */
    @Override
    public com.systemsjr.jrbase.location.vo.LocationTypeVO findById(java.lang.Long id)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationTypeVO findById(java.lang.Long id)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationTypeService#searchLocationTypes(com.systemsjr.jrbase.location.vo.LocationTypeSearchCriteria)
     */
    @Override
    public java.util.Collection<com.systemsjr.jrbase.location.vo.LocationTypeVO> searchLocationTypes(com.systemsjr.jrbase.location.vo.LocationTypeSearchCriteria searchCriteria)
    {
        // TODO implement public java.util.Collection<com.systemsjr.jrbase.location.vo.LocationTypeVO> searchLocationTypes(com.systemsjr.jrbase.location.vo.LocationTypeSearchCriteria searchCriteria)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationTypeService#getLocationTypesByStatus(com.systemsjr.jrbase.location.LocationStatus)
     */
    @Override
    public java.util.Collection<com.systemsjr.jrbase.location.vo.LocationTypeVO> getLocationTypesByStatus(com.systemsjr.jrbase.location.LocationStatus status)
    {
        // TODO implement public java.util.Collection<com.systemsjr.jrbase.location.vo.LocationTypeVO> getLocationTypesByStatus(com.systemsjr.jrbase.location.LocationStatus status)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationTypeService#getAllLocationTypes()
     */
    @Override
    public java.util.Collection<com.systemsjr.jrbase.location.vo.LocationTypeVO> getAllLocationTypes()
    {
        // TODO implement public java.util.Collection<com.systemsjr.jrbase.location.vo.LocationTypeVO> getAllLocationTypes()
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationTypeService#saveLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO)
     */
    @Override
    public com.systemsjr.jrbase.location.vo.LocationTypeVO saveLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO areaTypeVO)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationTypeVO saveLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO areaTypeVO)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationTypeService#removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO)
     */
    @Override
    public void removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO locationTypeVO)
    {
        // TODO implement public void removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO locationTypeVO)
        throw new UnsupportedOperationException("com.systemsjr.jrbase.location.service.LocationTypeService.removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO locationTypeVO) Not implemented!");
    }
}
