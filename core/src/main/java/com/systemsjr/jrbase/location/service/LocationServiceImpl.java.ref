// license-header java merge-point
/**
 * Generated by java cartridge ServiceImpl.vsl
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.jrbase.location.service;

/**
 * @see com.systemsjr.jrbase.location.service.LocationService
 */
public class LocationServiceImpl
    implements com.systemsjr.jrbase.location.service.LocationService
{
    /**
     * The serial version UID of this class. Needed for serialization.
     */
    private static final long serialVersionUID = 2641026562865115110L;

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#getAllLocations()
     */
    public com.systemsjr.jrbase.location.vo.LocationVO[] getAllLocations()
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationVO[] getAllLocations()
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#getLocationsInLocation(com.systemsjr.jrbase.location.vo.LocationVO)
     */
    public com.systemsjr.jrbase.location.vo.LocationVO[] getLocationsInLocation(com.systemsjr.jrbase.location.vo.LocationVO areaVO)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationVO[] getLocationsInLocation(com.systemsjr.jrbase.location.vo.LocationVO areaVO)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#removeLocation(com.systemsjr.jrbase.location.vo.LocationVO)
     */
    public void removeLocation(com.systemsjr.jrbase.location.vo.LocationVO locationVO)
    {
        // TODO implement public void removeLocation(com.systemsjr.jrbase.location.vo.LocationVO locationVO)
        throw new UnsupportedOperationException("com.systemsjr.jrbase.location.service.LocationService.removeLocation(com.systemsjr.jrbase.location.vo.LocationVO locationVO) Not implemented!");
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#saveLocation(com.systemsjr.jrbase.location.vo.LocationVO)
     */
    public com.systemsjr.jrbase.location.vo.LocationVO saveLocation(com.systemsjr.jrbase.location.vo.LocationVO locationVO)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationVO saveLocation(com.systemsjr.jrbase.location.vo.LocationVO locationVO)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO)
     */
    public void removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO locationTypeVO)
    {
        // TODO implement public void removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO locationTypeVO)
        throw new UnsupportedOperationException("com.systemsjr.jrbase.location.service.LocationService.removeLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO locationTypeVO) Not implemented!");
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#saveLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO)
     */
    public com.systemsjr.jrbase.location.vo.LocationTypeVO saveLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO areaTypeVO)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationTypeVO saveLocationType(com.systemsjr.jrbase.location.vo.LocationTypeVO areaTypeVO)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#getAllLocationTypes()
     */
    public com.systemsjr.jrbase.location.vo.LocationTypeVO[] getAllLocationTypes()
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationTypeVO[] getAllLocationTypes()
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#getLocationByStatus(com.systemsjr.jrbase.location.LocationStatus)
     */
    public com.systemsjr.jrbase.location.vo.LocationVO[] getLocationByStatus(com.systemsjr.jrbase.location.LocationStatus status)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationVO[] getLocationByStatus(com.systemsjr.jrbase.location.LocationStatus status)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#getLocationTypesByStatus(com.systemsjr.jrbase.location.LocationStatus)
     */
    public com.systemsjr.jrbase.location.vo.LocationTypeVO[] getLocationTypesByStatus(com.systemsjr.jrbase.location.LocationStatus status)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationTypeVO[] getLocationTypesByStatus(com.systemsjr.jrbase.location.LocationStatus status)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#getAllCountries()
     */
    public com.systemsjr.jrbase.location.vo.LocationVO[] getAllCountries()
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationVO[] getAllCountries()
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#searchLocations(com.systemsjr.jrbase.location.vo.LocationSearchCriteria)
     */
    public com.systemsjr.jrbase.location.vo.LocationVO[] searchLocations(com.systemsjr.jrbase.location.vo.LocationSearchCriteria searchCriteria)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationVO[] searchLocations(com.systemsjr.jrbase.location.vo.LocationSearchCriteria searchCriteria)
        return null;
    }

    /**
     * @see com.systemsjr.jrbase.location.service.LocationService#searchLocationTypes(com.systemsjr.jrbase.location.vo.LocationTypeSearchCriteria)
     */
    public com.systemsjr.jrbase.location.vo.LocationTypeVO[] searchLocationTypes(com.systemsjr.jrbase.location.vo.LocationTypeSearchCriteria searchCriteria)
    {
        // TODO implement public com.systemsjr.jrbase.location.vo.LocationTypeVO[] searchLocationTypes(com.systemsjr.jrbase.location.vo.LocationTypeSearchCriteria searchCriteria)
        return null;
    }
}
