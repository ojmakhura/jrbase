// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 01/26/2019 23:54:27+0000.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package com.systemsjr.jrbase.user;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.systemsjr.jrbase.role.vo.RoleVO;
import com.systemsjr.jrbase.user.vo.UserDetailsVO;

/**
 * @see User
 */
@Repository
public class UserDaoImpl
    extends UserDaoBase
{
	/**
     * @see com.systemsjr.jrbase.user.UserDao#findByCriteria(com.systemsjr.jrbase.user.vo.UserSearchCriteria)
     */
    @Override
	protected List handleFindByCriteria(com.systemsjr.jrbase.user.vo.UserSearchCriteria searchCriteria)
    {
    	Criteria criteria = getSession().createCriteria(User.class);
    	
    	if(searchCriteria.getUserId() != null){
    		criteria.add(Restrictions.ilike("userId", "%" + searchCriteria.getUserId() + "%"));
    	}
    	
    	if(searchCriteria.getName() != null){
    		criteria.add(Restrictions.ilike("name", "%" + searchCriteria.getName() + "%"));
    	}
    	
    	if(searchCriteria.getStatus() != null){
    		criteria.add(Restrictions.eq("status", "%" + searchCriteria.getStatus() + "%"));
    	}
        
    	return criteria.list();
    }

    /**
     * @see com.systemsjr.jrbase.user.UserDao#toUserVO(com.systemsjr.jrbase.user.User, com.systemsjr.jrbase.user.vo.UserVO)
     */
    @Override
	public void toUserVO(
        com.systemsjr.jrbase.user.User source,
        com.systemsjr.jrbase.user.vo.UserVO target)
    {
        super.toUserVO(source, target);
        target.setStatus(source.getStatus());
        target.setIndividual(getIndividualDao().toIndividualVO(source.getIndividual()));
    }


    /**
     * @see com.systemsjr.jrbase.user.UserDao#toUserVO(com.systemsjr.jrbase.user.User)
     */
    @Override
	public com.systemsjr.jrbase.user.vo.UserVO toUserVO(final com.systemsjr.jrbase.user.User entity)
    {
        // @todo verify behavior of toUserVO
        return super.toUserVO(entity);
    }


    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private com.systemsjr.jrbase.user.User loadUserFromUserVO(com.systemsjr.jrbase.user.vo.UserVO userVO)
    {
    	com.systemsjr.jrbase.user.User user;
        if (userVO.getId() == null)
        {
            user = com.systemsjr.jrbase.user.User.Factory.newInstance();
        } else{
        	user  = this.load(userVO.getId());
        }        
        
        return user;
    }

    
    /**
     * @see com.systemsjr.jrbase.user.UserDao#userVOToEntity(com.systemsjr.jrbase.user.vo.UserVO)
     */
    @Override
	public com.systemsjr.jrbase.user.User userVOToEntity(com.systemsjr.jrbase.user.vo.UserVO userVO)
    {
        com.systemsjr.jrbase.user.User entity = this.loadUserFromUserVO(userVO);
        this.userVOToEntity(userVO, entity, true);
        return entity;
    }


    /**
     * @see com.systemsjr.jrbase.user.UserDao#userVOToEntity(com.systemsjr.jrbase.user.vo.UserVO, com.systemsjr.jrbase.user.User)
     */
    @Override
	public void userVOToEntity(
        com.systemsjr.jrbase.user.vo.UserVO source,
        com.systemsjr.jrbase.user.User target,
        boolean copyIfNull)
    {
        super.userVOToEntity(source, target, copyIfNull);
        if(source.getIndividual() != null){
        	target.setIndividual(getIndividualDao().individualVOToEntity(source.getIndividual()));
        }
        
        //if(source.get){}
    }

	@Override
	protected User handleUserLogin(String username, String password) throws Exception {
		Criteria criteria = getSession().createCriteria(User.class);
		
		criteria.add(Restrictions.eq("username", username));
		
		List users = criteria.list();
		
		if(users.size() > 1 || users.size() < 1){
			return null;
		}
		
		return (User) users.get(0);
	}

	@Override
	public User userDetailsVOToEntity(UserDetailsVO userDetailsVO) {
		User user = this.userVOToEntity(userDetailsVO);
		
		user.setPassword(userDetailsVO.getPassword());
		user.setEmail(userDetailsVO.getEmail());
		user.setPhoto(userDetailsVO.getPhoto());
		if(userDetailsVO.getPassword1() != null){
			user.setPasswordLength(userDetailsVO.getPassword1().length());
		}
		
		if(userDetailsVO.getUserRoles() != null){
			for(RoleVO role : userDetailsVO.getUserRoles()){
				user.getUserRoles().add(getRoleDao().roleVOToEntity(role));
			}			
		}
		
		return user;
	}
	
	

	@Override
	public void toUserDetailsVO(User source, UserDetailsVO target) {
		super.toUserDetailsVO(source, target);
        target.setStatus(source.getStatus());
        target.setIndividual(getIndividualDao().toIndividualVO(source.getIndividual()));
        target.setUserRoles(getRoleDao().toRoleVOCollection(source.getUserRoles()));
        
        /*if(source.getUserLocations() != null){
        	UserLocationSearchCriteria searchCriteria = new UserLocationSearchCriteria();
        	
        	searchCriteria.setUser(target);
        	
        	//target.setUserLocations(getUserLocationDao().toUserLocationVOArray(getUserLocationDao().findByCriteria(searchCriteria)));
        	
        	//target.setUserLocations(getUserLocationDao().toUserLocationVOArray(source.getUserLocations()));
        }*/

	}

	@Override
	protected User handleGetUserDetails(String username) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
}